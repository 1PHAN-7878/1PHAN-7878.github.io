<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于git上传文件的.gitignore</title>
      <link href="/2023/10/27/%E5%85%B3%E4%BA%8Egit%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84-gitignore/"/>
      <url>/2023/10/27/%E5%85%B3%E4%BA%8Egit%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84-gitignore/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>产生问题：由于我想上传一个Unity的项目到github，但是里面包含有大于50MB的文件，github规定了上传的文件大小，因此是不可以传上去的。</p><h1 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h1><p>需要git-lfs工具支持</p><h1 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h1><p>将大文件加入.gitignore名单</p><p>由于我在操作时已经push出现了问题，所以需要先进行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></tbody></table></figure><p>我在创建了该文件之后，并没有删除之前的暂存区的内容，所以每一次commit和push都有之前的大文件，最终是折腾好。</p><p>==步骤如下==</p><p>创建 <code>.gitignore</code> 文件：在你的 Git 仓库根目录下，创建一个名为 <code>.gitignore</code> 的文件。可以使用文本编辑器来创建它。</p><p>编辑 <code>.gitignore</code> 文件：在 <code>.gitignore</code> 文件中，你可以列出你希望忽略的文件、目录或模式。每一行代表一个要忽略的项。可以使用通配符来匹配多个文件或目录，如 <code>*</code> 表示任意字符，<code>/</code> 表示目录分隔符，<code>#</code> 表示注释等。</p><p>   例如，以下是一个简单的 <code>.gitignore</code> 文件的示例：</p>   <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gitignoreCopy code# 忽略所有 .log 文件</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># 忽略 temp 目录</span><br><span class="line">/temp/</span><br><span class="line"></span><br><span class="line"># 忽略 .DS_Store 文件（通常在 macOS 系统中生成）</span><br><span class="line">.DS_Store</span><br></pre></td></tr></tbody></table></figure><p>保存并提交 <code>.gitignore</code> 文件：保存 <code>.gitignore</code> 文件后，将其提交到 Git 仓库中。你可以使用以下命令：</p>   <figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .gitignore</span><br><span class="line">git commit -m "Add .gitignore file"</span><br></pre></td></tr></tbody></table></figure><p>一旦设置了 <code>.gitignore</code> 文件，Git 将会忽略在文件中列出的文件和目录，不会将它们包括在版本历史中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLABQ入门关于图像的平移旋转镜像与分析</title>
      <link href="/2023/10/25/MATLABQ%E5%85%A5%E9%97%A8%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%83%8F%E7%9A%84%E5%B9%B3%E7%A7%BB%E6%97%8B%E8%BD%AC%E9%95%9C%E5%83%8F%E4%B8%8E%E5%88%86%E6%9E%90/"/>
      <url>/2023/10/25/MATLABQ%E5%85%A5%E9%97%A8%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%83%8F%E7%9A%84%E5%B9%B3%E7%A7%BB%E6%97%8B%E8%BD%AC%E9%95%9C%E5%83%8F%E4%B8%8E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="MATLAB-Q根作业"><a href="#MATLAB-Q根作业" class="headerlink" title="MATLAB Q根作业"></a>MATLAB Q根作业</h1><p>今天Q根说要我完成一些作业，他还会检查其中一部分。这让我感到非常紧张和着急，我开始焦虑地写作业。</p><p>在心慌意乱的状态下，我努力扩写了每个问题，并尽量给出详细的答案。我不断提醒自己要保持专注和冷静，尽力完成作业。</p><p>时间一分一秒地过去，我试图将注意力集中在任务上，忽略掉内心的不安和压力。我意识到，即使紧张也无法改变现实，唯一的解决办法就是面对并尽力去完成作业。</p><p>逐渐地，我发现自己进入了一种工作的节奏。通过不断努力，我开始逐渐克服恐惧和焦虑，专注于解决问题和完成任务。</p><p>最终，我完成了作业，并在一半检查时交给了Q根。我深呼吸一口气，希望我的努力能够得到认可。无论结果如何，我知道我已经尽力了，并从中学到了如何应对压力和困难。</p><p>这次经历让我明白，当面临紧张和压力时，保持冷静和专注非常重要。虽然一开始感到慌乱，但通过努力和积极思考，我能够克服困难，完成任务并成长。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>编程：图像的平移，水平，垂直，镜像（对比你自己的和自带的），验证：旋转（调用），imageresize实现图像缩放（很多算法不同），对比两幅图像是否相同的标准psnr</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">img = imread(<span class="string">'C:\Users\7878\Desktop\my_image.png'</span>);</span><br><span class="line">img1 = imresize(img, <span class="number">0.2</span>);</span><br><span class="line"><span class="comment">% 旋转</span></span><br><span class="line"><span class="built_in">angle</span> = <span class="number">45</span>;</span><br><span class="line">img_rotate = imrotate(img1, <span class="built_in">angle</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">imshow(img1);</span><br><span class="line"><span class="comment">% title('before rotate');</span></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">imshow(img_rotate);</span><br><span class="line"><span class="comment">% title('旋转后');</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_gray = rgb2gray(img1);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">imshow(img_gray);</span><br><span class="line"><span class="comment">% title('灰色');</span></span><br><span class="line"></span><br><span class="line">[r,c] = <span class="built_in">size</span>(img_gray);</span><br><span class="line">img_dst = <span class="built_in">zeros</span>(r,c);</span><br><span class="line"></span><br><span class="line">dx = <span class="number">50</span>;</span><br><span class="line">dy = <span class="number">50</span>;</span><br><span class="line">tras=[<span class="number">1</span> <span class="number">0</span> dx;<span class="number">0</span> <span class="number">1</span> dy;<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:r</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:c</span><br><span class="line">        <span class="comment">%         temp = [i;j;1];</span></span><br><span class="line">        <span class="comment">%         temp = tras*temp;</span></span><br><span class="line">        <span class="comment">%         x=temp(1,1);</span></span><br><span class="line">        <span class="comment">%         y=temp(2,1);</span></span><br><span class="line">        x = <span class="built_in">i</span> + dx;</span><br><span class="line">        y = <span class="built_in">j</span> + dy;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=<span class="number">1</span> &amp;&amp; x&lt;=r) &amp;&amp; (y&gt;=<span class="number">1</span> &amp;&amp; y&lt;=c)</span><br><span class="line">            img_dst(x,y) = img_gray(<span class="built_in">i</span>,<span class="built_in">j</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_mirror = <span class="built_in">zeros</span>(r,c);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:r</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:c</span><br><span class="line">        x = <span class="built_in">abs</span>(r - <span class="built_in">i</span>);</span><br><span class="line">        y = <span class="built_in">j</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=<span class="number">1</span> &amp;&amp; x&lt;=r) &amp;&amp; (y&gt;=<span class="number">1</span> &amp;&amp; y&lt;=c)</span><br><span class="line">            img_mirror(x,y) = img_gray(<span class="built_in">i</span>,<span class="built_in">j</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">imshow(uint8(img_mirror));</span><br><span class="line"><span class="comment">% title('镜像的');</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">imshow(uint8(img_dst));</span><br><span class="line"><span class="comment">% title('平移后');</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 水平镜像</span></span><br><span class="line">horizontal_flip = flip(img_gray, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 垂直镜像</span></span><br><span class="line">vertical_flip = flip(img_gray, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">imshow(vertical_flip);</span><br><span class="line"><span class="comment">% 峰值信噪比</span></span><br><span class="line"><span class="comment">% mse = sum((double(img_mirror) - double(vertical_flip)).^2, [], 'all') / numel(img_mirror);</span></span><br><span class="line"><span class="comment">% psnr = 10 * log10((255^2) / mse);</span></span><br><span class="line"><span class="comment">% disp(psnr);</span></span><br><span class="line"><span class="comment">% result = psnr(img_mirror, vertical_flip);</span></span><br><span class="line">[peaksnr, snr] = psnr(uint8(img_mirror), uint8(vertical_flip));</span><br><span class="line">  </span><br><span class="line">fprintf(<span class="string">'\n The Peak-SNR value is %0.4f'</span>, peaksnr);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习下的一些基本操作</title>
      <link href="/2023/10/18/git/"/>
      <url>/2023/10/18/git/</url>
      
        <content type="html"><![CDATA[<h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [ssh]</span><br></pre></td></tr></tbody></table></figure><blockquote><p><img src="C:\Users\7878\AppData\Roaming\Typora\typora-user-images\image-20231017162915772.png" alt="image-20231017162915772"></p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 git status 查看整个仓库的状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 git add [文件名] 命令跟踪此新建文件，即把新增文件添加到暂存区，以备提交</span></span><br><span class="line">git add one.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果要撤销暂存区的修改怎么办？</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据上图的提示，执行 git reset -- [文件名] 或者 git <span class="built_in">rm</span> --cached [文件名] 命令即可</span></span><br><span class="line">git reset -- one.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于查看 Git 仓库中所有分支（包括本地和远程分支）详细信息的命令。</span></span><br><span class="line">git branch -avv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 git commit 命令生成一个新的提交，一个必须的选项 -m 用来提供该提交的备注</span></span><br><span class="line">git commit -m 'commit one'</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 git <span class="built_in">log</span> 查看提交记录，紫色框中的十六进制序列号就是提交版本号</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> git reset --soft HEAD^ 撤销最近的一次提交，将修改还原到暂存区</span></span><br><span class="line">git reset --soft HEAD^</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为刚才的提交操作不是基于远程仓库 origin/master 分支的最新提交版本，而是撤回了一个版本。这种情况下也是可以将本地 master 分支推送到远程仓库的，需要加一个选项 -f ，它是 --force 的简写，这就是强制推送</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">push 是需要联网执行的，它对远程仓库进行了修改</span></span><br><span class="line">git push -f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git reflog 命令，它会记录本地仓库所有分支的每一次版本变化</span></span><br><span class="line">git reflog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">怎么回退到 5c04 那个版本呢？可以直接执行命令 git reset --hard [版本号]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果记不清版本号，也可以根据上图第 3 行的信息，执行 git reset --hard HEAD@{2} 命令</span></span><br><span class="line">git reset --hard HEAD@{2}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还想反悔，刚才还是改对了，怎么办？再执行一次即可，这次大括号里就是 1 了</span></span><br><span class="line">git reset --hard HEAD@{1}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><p>有些命令的重复度极高，比如 <code>git status</code> 和 <code>git branch -avv</code> 等，Git 可以对这些命令设置别名，以便简化对它们的使用，设置别名的命令是 <code>git config --global alias.[别名] [原命令]</code>，如果原命令中有选项，需要加引号。别名是自定义的，可以随意命名，设置后，原命令和别名具有同等作用。</p><blockquote><p><img src="https://doc.shiyanlou.com/courses/uid310176-20190514-1557819719173" alt="图片描述"></p></blockquote><p>自己设置的别名要记住，也可以使用 <code>git config -l</code> 命令查看配置文件。</p><ol><li><p><strong>git fetch</strong>：</p><ul><li><code>git fetch</code> 仅仅是将远程仓库的更新下载到本地，但它不会自动合并或更新你的当前工作分支。</li><li>它会下载远程分支的最新状态，但不会影响你的本地分支，你需要手动将这些更新合并到你的分支中。</li></ul><p>使用示例：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>git pull</strong>：</p><ul><li><code>git pull</code> 也从远程仓库获取更新，但它会自动将远程分支的更新合并到你的当前分支。</li><li>通常，<code>git pull</code> 相当于运行 <code>git fetch</code> 后再运行 <code>git merge</code> 来合并远程分支的更新。</li></ul><p>使用示例：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></tbody></table></figure></li></ol><p>总之，主要区别在于自动合并。<code>git fetch</code> 用于获取远程更新，但不自动合并，而 <code>git pull</code> 用于获取远程更新并自动合并到当前分支。选择使用哪一个取决于你的工作流程和需求。如果你想手动审查和控制合并过程，可以首先运行 <code>git fetch</code>，然后手动合并。如果你想快速将远程更新合并到当前分支，可以使用 <code>git pull</code>。</p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>要查看分支信息，只需在终端中输入以下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></figure><p>这将列出本地分支，当前分支将以星号标记。如果要查看远程分支，可以使用以下命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 git branch [分支名] 可以创建新的分支</span></span><br><span class="line">git branch dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 git checkout [分支名] 切换分支</span></span><br><span class="line">git checkout dev</span><br></pre></td></tr></tbody></table></figure><p>在新的分支中创建文件然后进行提交到暂存区和版本库</p><img src="C:\Users\7878\AppData\Roaming\Typora\typora-user-images\image-20231018144722734.png" alt="image-20231018144722734" style="zoom:50%;"><p>好，新功能已经写好并提交到了版本区，现在要推送了，推送到哪里呢？正常逻辑当然要推送到远程仓库的同名分支，不过现在远程仓库里只有一个分支：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 git push [主机名] [本地分支名]:[远程分支名] 即可将本地分支推送到远程仓库的分支中，通常冒号前后的分支名是相同的，如果是相同的，可以省略 :[远程分支名]，如果远程分支不存在，会自动创建</span></span><br><span class="line">git push origin dev:dev</span><br></pre></td></tr></tbody></table></figure><img src="C:\Users\7878\AppData\Roaming\Typora\typora-user-images\image-20231018145103413.png" alt="image-20231018145103413" style="zoom:50%;"><img src="C:\Users\7878\AppData\Roaming\Typora\typora-user-images\image-20231018145147990.png" alt="image-20231018145147990" style="zoom: 50%;"><p>如果再次在dev上修改并提交每次仍要输入<code>git push origin dev:dev</code>,可以像main一样将本地branch与远程branch关联</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行这个命令 git branch -u [主机名/远程分支名] [本地分支名] 将本地分支与远程分支关联</span></span><br><span class="line">git branch -u origin/dev</span><br></pre></td></tr></tbody></table></figure><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程分支的命令：git push [主机名] --delete [远程分支名]</span></span><br><span class="line">git push origin --delete dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 git branch -D [分支名] 删除本地分支</span></span><br><span class="line">git branch -D dev</span><br></pre></td></tr></tbody></table></figure><h1 id="多人操作"><a href="#多人操作" class="headerlink" title="多人操作"></a>多人操作</h1><p>建立新的仓库，邀请参与人员</p><p>组长可以发布issue</p><p>组员克隆仓库到本地 <code>git clone </code></p><p>解决issue 在提交时 <code>git commit - m 'fix #1 this is fix one'</code></p><p><code>pull requests</code></p><p><img src="https://doc.shiyanlou.com/document-uid310176labid9824timestamp1548757171365.png" alt="此处输入图片的描述"></p><p><img src="https://doc.shiyanlou.com/document-uid310176labid9824timestamp1548757180192.png" alt="此处输入图片的描述"></p><p><img src="https://doc.shiyanlou.com/document-uid310176labid9824timestamp1548757180192.png" alt="此处输入图片的描述"></p><p><img src="https://doc.shiyanlou.com/document-uid310176labid9824timestamp1548757219135.png" alt="此处输入图片的描述"></p><p>以上就是一次完整的修改、提交、推送、提 PR、合并 PR 的过程。</p><p><strong>需要注意的一点：从 A 向 B 提 PR 后，在 PR 合并或关闭前，A 上所有新增的提交都会出现在 PR 里。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="实验四"><a href="#实验四" class="headerlink" title="实验四"></a>实验四</h1><p><strong>(1) 创建一个目录，目录名用学号命名：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">mkdir</span> /201612345</span><br></pre></td></tr></tbody></table></figure><p><strong>(2) 查看该目录是否成功创建：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">ls</span> /</span><br></pre></td></tr></tbody></table></figure><p><strong>(3) 创建一个文本文件并上传到HDFS：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello hdfs"</span> &gt; /usr/local/hadoop/zhangsan.txt</span><br><span class="line">hdfs dfs -put /usr/local/hadoop/zhangsan.txt /201612345/</span><br></pre></td></tr></tbody></table></figure><p><strong>(4) 将该文件上传到HDFS的学号目录中：</strong></p><p>这已经在第三步中完成。</p><p><strong>(5) 查看该文件是否成功上传到HDFS中：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">ls</span> /201612345</span><br></pre></td></tr></tbody></table></figure><p><strong>(6) 将该文件从HDFS下载到本地目录：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -get /201612345/zhangsan.txt /home/hadoop/downloads/</span><br></pre></td></tr></tbody></table></figure><p><strong>(7) 将该文件从学号目录中拷贝到input目录中，并查看是否拷贝成功：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">cp</span> /201612345/zhangsan.txt /input/</span><br></pre></td></tr></tbody></table></figure><p><strong>(8) 在HDFS中将该文件从学号目录中删除：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">rm</span> /201612345/zhangsan.txt</span><br></pre></td></tr></tbody></table></figure><p><strong>(9) 在HDFS中将学号目录删除：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">rmdir</span> /201612345</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yhcsb</title>
      <link href="/2023/10/10/yhcsb/"/>
      <url>/2023/10/10/yhcsb/</url>
      
        <content type="html"><![CDATA[<p><img src="E:\hexo\1PHAN-7878.github.io\source\images\fengjing.jpg" alt="fengjing"></p>]]></content>
      
      
      
        <tags>
            
            <tag> yu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/09/22/java/"/>
      <url>/2023/09/22/java/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1 基本语法"></a>1 基本语法</h1><h2 id="1-1-String"><a href="#1-1-String" class="headerlink" title="1.1 String"></a>1.1 String</h2><p>在Java中，<code>String</code> 类是用于表示字符串的类，它提供了丰富的方法和功能来操作字符串。字符串是一组字符的序列，而在Java中，字符串是不可变的，这意味着一旦创建了字符串，就不能更改其内容。</p><p>以下是一些常用的 <code>String</code> 类的用法和示例：</p><h3 id="1-创建字符串"><a href="#1-创建字符串" class="headerlink" title="1. 创建字符串"></a>1. 创建字符串</h3><p>可以通过直接赋值或使用构造函数创建字符串对象：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">"Hello, World!"</span>;  <span class="comment">// 使用直接赋值创建字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"Hello, World!"</span>);  <span class="comment">// 使用构造函数创建字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-获取字符串长度"><a href="#2-获取字符串长度" class="headerlink" title="2. 获取字符串长度"></a>2. 获取字符串长度</h3><p>可以使用 <code>length()</code> 方法获取字符串的长度：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length();  <span class="comment">// 获取字符串长度</span></span><br><span class="line">System.out.println(<span class="string">"Length of the string: "</span> + length);</span><br></pre></td></tr></tbody></table></figure><h3 id="3-拼接字符串"><a href="#3-拼接字符串" class="headerlink" title="3. 拼接字符串"></a>3. 拼接字符串</h3><p>可以使用 <code>+</code> 运算符或 <code>concat()</code> 方法将多个字符串拼接在一起：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">"Hello, "</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">"World!"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str1 + str2;  <span class="comment">// 使用 + 运算符拼接字符串</span></span><br><span class="line"><span class="comment">// 或者使用 concat() 方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str1.concat(str2);</span><br><span class="line">System.out.println(<span class="string">"Concatenated string: "</span> + result);</span><br></pre></td></tr></tbody></table></figure><h3 id="4-字符串比较"><a href="#4-字符串比较" class="headerlink" title="4. 字符串比较"></a>4. 字符串比较</h3><p>可以使用 <code>equals()</code> 方法或 <code>compareTo()</code> 方法比较字符串：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">"hello"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">"Hello"</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> str1.equals(str2);  <span class="comment">// 使用 equals() 比较字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">comparison</span> <span class="operator">=</span> str1.compareTo(str2);  <span class="comment">// 使用 compareTo() 比较字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-提取子字符串"><a href="#5-提取子字符串" class="headerlink" title="5. 提取子字符串"></a>5. 提取子字符串</h3><p>可以使用 <code>substring()</code> 方法从字符串中提取子串：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">subStr</span> <span class="operator">=</span> str.substring(<span class="number">7</span>);  <span class="comment">// 提取从位置7开始的子串</span></span><br><span class="line">System.out.println(<span class="string">"Substring: "</span> + subStr);</span><br></pre></td></tr></tbody></table></figure><h3 id="6-查找子字符串"><a href="#6-查找子字符串" class="headerlink" title="6. 查找子字符串"></a>6. 查找子字符串</h3><p>可以使用 <code>indexOf()</code> 方法或 <code>contains()</code> 方法查找子字符串是否存在：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">"World"</span>);  <span class="comment">// 查找子串的位置</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> str.contains(<span class="string">"Hello"</span>);  <span class="comment">// 检查是否包含子串</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-StringBuilder"><a href="#1-2-StringBuilder" class="headerlink" title="1.2 StringBuilder"></a>1.2 StringBuilder</h2><p>在Java中，<code>StringBuilder</code> 是一个用于处理可变字符串的类。与 <code>String</code> 不同，<code>StringBuilder</code> 允许你在不创建新对象的情况下修改字符串的内容，这对于频繁的字符串拼接操作非常高效。以下是一些使用 <code>StringBuilder</code> 的常见方法和示例：</p><h3 id="1-创建-StringBuilder-对象"><a href="#1-创建-StringBuilder-对象" class="headerlink" title="1. 创建 StringBuilder 对象"></a>1. 创建 <code>StringBuilder</code> 对象</h3><p>可以使用构造函数创建一个 <code>StringBuilder</code> 对象：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); <span class="comment">// 创建一个空的 StringBuilder 对象</span></span><br></pre></td></tr></tbody></table></figure><p>你也可以在构造函数中传入一个初始字符串：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello"</span>); <span class="comment">// 创建包含初始字符串 "Hello" 的 StringBuilder 对象</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-追加字符串"><a href="#2-追加字符串" class="headerlink" title="2. 追加字符串"></a>2. 追加字符串</h3><p>可以使用 <code>append()</code> 方法来追加字符串到 <code>StringBuilder</code> 对象：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello"</span>);</span><br><span class="line">sb.append(<span class="string">", World!"</span>); <span class="comment">// 追加字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-插入字符串"><a href="#3-插入字符串" class="headerlink" title="3. 插入字符串"></a>3. 插入字符串</h3><p>使用 <code>insert()</code> 方法可以在指定位置插入字符串：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello"</span>);</span><br><span class="line">sb.insert(<span class="number">5</span>, <span class="string">" Java"</span>); <span class="comment">// 在位置5插入字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-删除字符"><a href="#4-删除字符" class="headerlink" title="4. 删除字符"></a>4. 删除字符</h3><p>使用 <code>delete()</code> 方法可以删除指定范围内的字符：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">sb.delete(<span class="number">7</span>, <span class="number">13</span>); <span class="comment">// 删除位置7到13之间的字符</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-替换字符"><a href="#5-替换字符" class="headerlink" title="5. 替换字符"></a>5. 替换字符</h3><p>使用 <code>replace()</code> 方法可以替换指定范围内的字符：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">sb.replace(<span class="number">7</span>, <span class="number">13</span>, <span class="string">"Java"</span>); <span class="comment">// 将位置7到13之间的字符替换为 "Java"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-获取字符串"><a href="#6-获取字符串" class="headerlink" title="6. 获取字符串"></a>6. 获取字符串</h3><p>使用 <code>toString()</code> 方法可以将 <code>StringBuilder</code> 对象转换为 <code>String</code>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sb.toString(); <span class="comment">// 转换为 String</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-获取长度"><a href="#7-获取长度" class="headerlink" title="7. 获取长度"></a>7. 获取长度</h3><p>可以使用 <code>length()</code> 方法获取 <code>StringBuilder</code> 中字符的数量：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> sb.length(); <span class="comment">// 获取长度</span></span><br></pre></td></tr></tbody></table></figure><p><code>StringBuilder</code> 的方法允许你执行许多字符串操作，而不需要创建多个不必要的字符串对象，这在性能上通常更高效。因此，当需要频繁修改字符串时，建议使用 <code>StringBuilder</code>。</p><h2 id="1-3-final关键字"><a href="#1-3-final关键字" class="headerlink" title="1.3 final关键字"></a>1.3 final关键字</h2><p><code>final</code> 是 Java 编程语言中的一个关键字，用于表示不可变性和不可继承性，它可以用于不同的上下文中，具体作用如下：</p><ol><li><p><strong>不可变变量</strong>：当你将 <code>final</code> 关键字应用于一个变量时，它表示该变量的值不能被修改，即它是一个不可变变量（immutable）。通常用于声明常量，这意味着一旦分配了值，就不能再更改。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">// x = 20;  // 这将导致编译错误，因为 x 是不可变的</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>不可变类</strong>：当你将 <code>final</code> 关键字应用于一个类时，它表示该类不能被继承，即它是一个不可继承的类。这通常用于防止其他类继承或修改基类的行为，以确保类的稳定性和安全性。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MyFinalClass</span> {</span><br><span class="line">    <span class="comment">// 类的成员和方法</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 下面的代码将导致编译错误，因为无法继承 MyFinalClass</span></span><br><span class="line"><span class="comment">// class AnotherClass extends MyFinalClass { ... }</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>不可变方法</strong>：当你将 <code>final</code> 关键字应用于一个方法时，它表示该方法不能被子类重写或覆盖。这通常用于确保某个方法的行为不会被修改。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyBaseClass</span> {</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">myFinalMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 这个方法不能被子类重写</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>不可变参数</strong>：当你将 <code>final</code> 关键字应用于方法的参数时，它表示该参数的值在方法内部不能被修改。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> param)</span> {</span><br><span class="line">    <span class="comment">// param 的值不能在方法内部被修改</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="1-4-super关键字"><a href="#1-4-super关键字" class="headerlink" title="1.4 super关键字"></a>1.4 super关键字</h2><p><code>super</code> 是 Java 中的一个关键字，用于引用父类（或超类）的成员变量、方法和构造函数。它可以在子类中使用，用于访问或调用父类的成员或构造函数。以下是关于 <code>super</code> 关键字的使用方法：</p><ol><li><p><strong>访问父类的成员变量</strong>：你可以使用 <code>super</code> 关键字来访问父类中的成员变量，特别是在子类中存在与父类同名的成员变量时。这样可以避免混淆。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"子类 x："</span> + x); <span class="comment">// 访问子类的 x</span></span><br><span class="line">        System.out.println(<span class="string">"父类 x："</span> + <span class="built_in">super</span>.x); <span class="comment">// 访问父类的 x</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>调用父类的方法</strong>：你可以使用 <code>super</code> 关键字来调用父类中的方法，特别是在子类中存在与父类同名的方法时。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"这是父类的消息"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"这是子类的消息"</span>);</span><br><span class="line">        <span class="built_in">super</span>.showMessage(); <span class="comment">// 调用父类的 showMessage() 方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>调用父类的构造函数</strong>：你可以使用 <code>super</code> 关键字来调用父类的构造函数。这通常用于子类的构造函数中，以确保父类的初始化工作得以执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> {</span><br><span class="line">    Parent() {</span><br><span class="line">        System.out.println(<span class="string">"父类的构造函数"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> {</span><br><span class="line">    Child() {</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">        System.out.println(<span class="string">"子类的构造函数"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>注意事项：</p><ul><li>在子类构造函数中，如果没有显式调用 <code>super()</code> 来调用父类的构造函数，Java 将自动调用父类的默认构造函数。</li><li><code>super()</code> 必须作为子类构造函数的第一行语句出现，因此它通常是构造函数的第一句。</li></ul><h2 id="1-5-abstract-关键字"><a href="#1-5-abstract-关键字" class="headerlink" title="1.5 abstract 关键字"></a>1.5 abstract 关键字</h2><p><code>abstract</code> 是 Java 中的一个关键字，用于声明抽象类和抽象方法。抽象类和抽象方法的目的是为了提供一种结构，以便其他类可以继承或实现它们，并根据需要进行定制化实现。以下是 <code>abstract</code> 关键字的主要作用：</p><ol><li><p><strong>抽象类</strong>：</p><ul><li>抽象类用 <code>abstract</code> 关键字声明，它不能被实例化（不能创建对象）。</li><li>抽象类可以包含抽象方法和非抽象方法。</li><li>抽象类的存在是为了被继承和拓展，提供通用的结构和行为。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> {</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">nonAbstractMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"非抽象方法的实现"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>抽象方法</strong>：</p><ul><li>抽象方法用 <code>abstract</code> 关键字声明，但没有方法体。</li><li>抽象方法必须在抽象类中声明，不允许在普通类中声明。</li><li>抽象方法的具体实现由继承抽象类的子类完成。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> {</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> {</span><br><span class="line">    <span class="comment">// 必须实现抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"抽象方法的实现"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>抽象类和抽象方法的作用是为了促使子类实现特定的行为，同时确保了基类中的通用结构。这有助于提高代码的可维护性和扩展性，同时强调了面向对象设计的抽象思想。</p><h1 id="2-类"><a href="#2-类" class="headerlink" title="2 类"></a>2 类</h1><h2 id="2-1-接口"><a href="#2-1-接口" class="headerlink" title="2.1 接口"></a>2.1 接口</h2><p>在 Java 中，接口（Interface）是一种抽象类型，它定义了一组抽象方法，但没有具体的实现。接口通常用于描述对象应该具有的行为。以下是关于 Java 接口的主要特点：</p><ol><li><p><strong>接口定义</strong>：接口使用 <code>interface</code> 关键字定义。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="comment">// 抽象方法的声明</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>抽象方法</strong>：接口中的方法都是抽象的，它们只有方法签名，没有方法体。</p></li><li><p><strong>接口实现</strong>：一个类可以实现一个或多个接口。使用关键字 <code>implements</code> 来表示类实现了一个接口。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="comment">// 必须实现接口中的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 实现具体逻辑</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>多继承</strong>：Java 中不支持多继承，但一个类可以实现多个接口，这使得 Java 中的多继承概念得以体现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface1</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface2</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>, Interface2 {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 实现 method1</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 实现 method2</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>接口默认方法</strong>：从 Java 8 开始，接口可以包含具有默认实现的方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"默认方法的实现"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>接口静态方法</strong>：从 Java 8 开始，接口可以包含静态方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"静态方法的实现"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>接口在 Java 中扮演着重要的角色，它提供了一种将抽象概念定义为一组行为的方式，从而实现了多态性和代码复用。接口也是 Java 中实现多继承的一种方式，使得类可以实现多个行为规范。</p><h2 id="2-2-Override"><a href="#2-2-Override" class="headerlink" title="2.2 @Override"></a>2.2 @Override</h2><p><code>@Override</code> 注解用于告诉编译器，被标注的方法是要重写（覆盖）父类或接口中的方法。通常情况下，你应该在以下情况下使用 <code>@Override</code> 注解：</p><ol><li><p><strong>重写父类方法</strong>：当你在子类中编写一个方法，其名称、参数列表和返回类型与父类中的方法完全一致时，应该使用 <code>@Override</code> 注解来明确指示你意图重写父类方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 父类方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 子类重写的方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>实现接口方法</strong>：当你在一个类中实现了一个接口中的方法时，也应该使用 <code>@Override</code> 注解。这有助于提醒你，你是在实现一个接口方法，而不是创建一个新的方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 实现接口方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>编码规范</strong>：在许多编码规范中，推荐使用 <code>@Override</code> 注解，以提高代码的可读性和可维护性。这有助于其他开发人员理解你的代码意图，并防止意外的方法签名变更。</p></li></ol><p>虽然在上述情况下使用 <code>@Override</code> 注解是很好的实践，但并非所有情况下都需要使用它。在以下情况下，你通常不需要使用 <code>@Override</code> 注解：</p><ul><li>当你编写的方法不是为了重写父类或实现接口中的方法时。</li><li>当你在 Java 版本低于 5 的环境中编写代码，因为 <code>@Override</code> 注解是在 Java 5 中引入的。</li></ul><h1 id="3-常用类"><a href="#3-常用类" class="headerlink" title="3 常用类"></a>3 常用类</h1><h2 id="3-1-Arrays"><a href="#3-1-Arrays" class="headerlink" title="3.1 Arrays"></a>3.1 Arrays</h2><p>当使用 <code>Arrays</code> 类的方法时，通常需要导入 <code>java.util.Arrays</code> 包。以下是一些使用 <code>Arrays</code> 类方法的示例：</p><p><strong>1. 使用 <code>sort</code> 方法对数组进行排序：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraySortingExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = {<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>};</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(numbers);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Sorted Array: "</span> + Arrays.toString(numbers));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>2. 使用 <code>binarySearch</code> 方法查找元素：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>};</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) {</span><br><span class="line">            System.out.println(<span class="string">"Element "</span> + key + <span class="string">" found at index "</span> + index);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"Element "</span> + key + <span class="string">" not found in the array"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>3. 使用 <code>equals</code> 方法比较数组：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayComparisonExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] array1 = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line">        <span class="type">int</span>[] array2 = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> Arrays.equals(array1, array2);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (isEqual) {</span><br><span class="line">            System.out.println(<span class="string">"Arrays are equal."</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"Arrays are not equal."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>4. 使用 <code>fill</code> 方法填充数组：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayFillExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        </span><br><span class="line">        Arrays.fill(numbers, <span class="number">42</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Filled Array: "</span> + Arrays.toString(numbers));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-time"><a href="#3-2-time" class="headerlink" title="3.2 time"></a>3.2 time</h2><p><code>java.time</code> 包是Java 8引入的现代日期和时间处理API，提供了一系列类来处理日期、时间和时区。以下是一些<code>java.time</code>包的主要类和用法示例：</p><ol><li><p><strong>LocalDate</strong>：用于表示日期，不包含时间和时区信息。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">customDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> today.getYear();</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> today.getMonthValue();</span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> today.getDayOfMonth();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>LocalTime</strong>：用于表示时间，不包含日期和时区信息。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">customTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> currentTime.getHour();</span><br><span class="line"><span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> currentTime.getMinute();</span><br><span class="line"><span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> currentTime.getSecond();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>LocalDateTime</strong>：用于表示日期和时间的组合，不包含时区信息。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">currentDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">customDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> currentDateTime.getYear();</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> currentDateTime.getMonthValue();</span><br><span class="line"><span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> currentDateTime.getHour();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>ZonedDateTime</strong>：用于表示带时区的日期和时间。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ZoneId</span> <span class="variable">newYorkZone</span> <span class="operator">=</span> ZoneId.of(<span class="string">"America/New_York"</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">newYorkTime</span> <span class="operator">=</span> ZonedDateTime.now(newYorkZone);</span><br><span class="line"></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">londonZone</span> <span class="operator">=</span> ZoneId.of(<span class="string">"Europe/London"</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">londonTime</span> <span class="operator">=</span> newYorkTime.withZoneSameInstant(londonZone);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>Duration</strong>：用于表示时间段，可以用于计算时间间隔。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">start</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">end</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(start, end);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">hours</span> <span class="operator">=</span> duration.toHours();</span><br><span class="line"><span class="type">long</span> <span class="variable">minutes</span> <span class="operator">=</span> duration.toMinutes();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>Period</strong>：用于表示日期段，可以用于计算日期间隔。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">startDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">endDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(startDate, endDate);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> period.getDays();</span><br><span class="line"><span class="type">int</span> <span class="variable">months</span> <span class="operator">=</span> period.getMonths();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>DateTimeFormatter</strong>：用于日期和时间的格式化和解析。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">formattedDateTime</span> <span class="operator">=</span> LocalDateTime.now().format(formatter);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">parsedDateTime</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">"2023-09-25 14:30:00"</span>, formatter);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>TemporalAdjusters</strong>：提供了一些有用的日期调整器，例如获取某月的第一个周一。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">firstMondayOfSeptember</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">1</span>).with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="3-3-Math"><a href="#3-3-Math" class="headerlink" title="3.3 Math"></a>3.3 Math</h2><p><code>java.lang.Math</code> 类包含了一些常用的数学方法，用于执行各种数学运算。以下是一些常用的 <code>Math</code> 类方法：</p><ol><li><strong>绝对值相关方法：</strong><ul><li><code>abs(x)</code>：返回给定数的绝对值。</li><li><code>max(x, y)</code>：返回两个数中较大的那个。</li><li><code>min(x, y)</code>：返回两个数中较小的那个。</li></ul></li><li><strong>舍入相关方法：</strong><ul><li><code>ceil(x)</code>：将参数向正无穷方向舍入为最接近的整数。</li><li><code>floor(x)</code>：将参数向负无穷方向舍入为最接近的整数。</li><li><code>round(x)</code>：将参数四舍五入为最接近的整数。</li><li><code>rint(x)</code>：将参数四舍五入为最接近的整数，如果两个整数同样接近，则选择偶数。</li></ul></li><li><strong>指数和对数相关方法：</strong><ul><li><code>exp(x)</code>：返回指数函数 e^x 的值。</li><li><code>log(x)</code>：返回自然对数（以 e 为底）的值。</li><li><code>pow(x, y)</code>：返回 x 的 y 次方。</li><li><code>sqrt(x)</code>：返回给定数的平方根。</li></ul></li><li><strong>三角函数相关方法：</strong><ul><li><code>sin(x)</code>：返回给定角度的正弦值。</li><li><code>cos(x)</code>：返回给定角度的余弦值。</li><li><code>tan(x)</code>：返回给定角度的正切值。</li><li><code>asin(x)</code>：返回给定值的反正弦值。</li><li><code>acos(x)</code>：返回给定值的反余弦值。</li><li><code>atan(x)</code>：返回给定值的反正切值。</li><li><code>toRadians(x)</code>：将角度从度数转换为弧度。</li><li><code>toDegrees(x)</code>：将角度从弧度转换为度数。</li></ul></li><li><strong>随机数生成方法：</strong><ul><li><code>random()</code>：返回一个伪随机 double 值，范围在 [0.0, 1.0) 之间。</li></ul></li></ol><h2 id="3-4-System"><a href="#3-4-System" class="headerlink" title="3.4 System"></a>3.4 System</h2><p><code>java.lang.System</code> 类是Java标准库中的一个类，它提供了一系列用于与系统交互的方法，包括访问系统属性、标准输入输出、以及进行垃圾回收等。以下是一些常见的 <code>System</code> 类方法和用法：</p><ol><li><p><strong>标准输入输出（I/O）：</strong></p><p>-<br>  System.out</p><p>  标准输出流，通常用于向控制台打印信息。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello, world!"</span>); <span class="comment">// 打印文本到控制台</span></span><br></pre></td></tr></tbody></table></figure><p>-<br>  System.err</p><p>  标准错误流，用于输出错误信息。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.err.println(<span class="string">"An error occurred!"</span>); <span class="comment">// 打印错误信息到控制台</span></span><br></pre></td></tr></tbody></table></figure><p>-<br>  System.in</p><p>  标准输入流，通常用于从控制台读取用户输入。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">"Enter your name: "</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>系统属性：</strong></p><p>-<br>  System.getProperty(String key)</p><p>  ：获取系统属性的值，可以用于获取系统信息，如操作系统类型、Java版本等。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">javaVersion</span> <span class="operator">=</span> System.getProperty(<span class="string">"java.version"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>垃圾回收：</strong></p><p>-<br>  System.gc()</p><p>  ：请求系统进行垃圾回收操作。注意，具体的垃圾回收时机和行为是由JVM决定的，所以不一定会立即执行垃圾回收。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.gc(); <span class="comment">// 请求进行垃圾回收</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>程序终止：</strong></p><ul><li><pre><code class="java">System.exit(int status)<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">终止当前Java虚拟机的运行，参数通常用于指示程序的退出状态。0 表示正常退出，非零值通常用于表示异常退出。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">System.exit(0); // 正常退出</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><p><strong>时间获取：</strong></p><ul><li><pre><code>System.currentTimeMillis()<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：返回当前时间的毫秒数，通常用于性能分析和计时。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">long startTime = System.currentTimeMillis();</span><br><span class="line">// 执行一些代码</span><br><span class="line">long endTime = System.currentTimeMillis();</span><br><span class="line">long elapsedTime = endTime - startTime;</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><p><strong>数组拷贝：</strong></p><ul><li><pre><code class="java">System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：用于将源数组的一部分复制到目标数组的指定位置。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">int[] sourceArray = {1, 2, 3, 4, 5};</span><br><span class="line">int[] destArray = new int[5];</span><br><span class="line">System.arraycopy(sourceArray, 0, destArray, 0, 5);</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ul></li></ol><p><code>System</code> 类提供了许多有用的方法，可以用于访问系统资源、执行一些底层操作，以及进行基本的输入输出。在实际编程中，它通常用于调试、性能分析、系统属性获取等操作。但要注意，在大多数情况下，直接与系统资源交互的需求不多，因为Java提供了更高级的库和API来完成常见的任务。</p><h2 id="3-5-Random"><a href="#3-5-Random" class="headerlink" title="3.5 Random"></a>3.5 Random</h2><p>在Java中，你可以使用 <code>java.util.Random</code> 类来生成随机数。以下是使用 <code>Random</code> 类的基本方法：</p><ol><li><p><strong>创建 Random 对象：</strong></p><p>首先，你需要创建一个 <code>Random</code> 对象，可以通过以下方式之一来实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用默认种子创建 Random 对象</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指定种子创建 Random 对象</span></span><br><span class="line"><span class="type">long</span> <span class="variable">seed</span> <span class="operator">=</span> <span class="number">123456789L</span>; <span class="comment">// 可以是任何长整数</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">seededRandom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(seed);</span><br></pre></td></tr></tbody></table></figure><p>通常情况下，如果你不需要指定特定的种子，可以使用无参数的构造函数创建 <code>Random</code> 对象，它会使用系统时间作为默认种子。</p></li><li><p><strong>生成随机整数：</strong></p><p>使用 <code>nextInt()</code> 方法可以生成一个随机整数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">randomNumber</span> <span class="operator">=</span> random.nextInt(); <span class="comment">// 生成任意范围的随机整数</span></span><br></pre></td></tr></tbody></table></figure><p>如果你希望生成在指定范围内的随机整数，可以使用 <code>nextInt(int bound)</code> 方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">randomInRange</span> <span class="operator">=</span> random.nextInt(max - min + <span class="number">1</span>) + min; <span class="comment">// 生成1到100之间的随机整数</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>生成随机浮点数：</strong></p><p>使用 <code>nextDouble()</code> 方法可以生成一个随机的 double 值，范围在 [0.0, 1.0) 之间：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">randomDouble</span> <span class="operator">=</span> random.nextDouble(); <span class="comment">// 生成0.0到1.0之间的随机浮点数</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>生成随机布尔值：</strong></p><p>使用 <code>nextBoolean()</code> 方法可以生成一个随机的布尔值（<code>true</code> 或 <code>false</code>）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">randomBoolean</span> <span class="operator">=</span> random.nextBoolean(); <span class="comment">// 随机生成true或false</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="4-泛型"><a href="#4-泛型" class="headerlink" title="4 泛型"></a>4 泛型</h1><h2 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h2><p>Java中的泛型是一种编程机制，它允许你在类、接口和方法中使用类型参数，以在不同情况下使用相同的代码来处理不同的数据类型。泛型的主要目的是提高代码的重用性、类型安全性和可读性。</p><p>使用泛型，你可以定义类、接口或方法，使其能够处理多种数据类型而不必在每次使用时进行强制类型转换。泛型类、泛型接口和泛型方法的定义都可以包含类型参数。类型参数可以在定义时指定，然后在实际使用时传入具体的类型。</p><p>以下是一个简单的泛型类的示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericBox</span>&lt;T&gt; {</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericBox</span><span class="params">(T value)</span> {</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，<code>GenericBox</code> 是一个泛型类，它有一个类型参数 <code>T</code>。你可以创建 <code>GenericBox</code> 的实例，将不同类型的数据存储在其中，而无需进行显式的类型转换。</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GenericBox&lt;Integer&gt; intBox = <span class="keyword">new</span> <span class="title class_">GenericBox</span>&lt;&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">intValue</span> <span class="operator">=</span> intBox.getValue(); <span class="comment">// 不需要强制类型转换</span></span><br><span class="line"></span><br><span class="line">GenericBox&lt;String&gt; strBox = <span class="keyword">new</span> <span class="title class_">GenericBox</span>&lt;&gt;(<span class="string">"Hello, Generics!"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">strValue</span> <span class="operator">=</span> strBox.getValue(); <span class="comment">// 不需要强制类型转换</span></span><br></pre></td></tr></tbody></table></figure><p>这使得代码更灵活，可以在不同的情况下使用相同的泛型类，而不必为每种数据类型创建不同的类或方法。泛型还有助于在编译时检测类型错误，提高了代码的安全性。</p><p>在Java中，尖括号 <code>&lt;&gt;</code> 主要用于泛型（Generics）的定义和使用。泛型是Java中的一项重要特性，允许你编写通用的、类型安全的代码，以便在运行时处理不同类型的数据。</p><p>以下是 <code>&lt;&gt;</code> 的用法和相关概念：</p><ol><li><p><strong>泛型类 (Generic Class):</strong> 你可以创建一个类，其中包含一个或多个类型参数，用 <code>&lt;&gt;</code> 括起来，然后在类的定义中使用这些类型参数。这样的类被称为泛型类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGenericClass</span>&lt;T&gt; {</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyGenericClass</span><span class="params">(T value)</span> {</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>泛型接口 (Generic Interface):</strong> 类似于泛型类，你可以创建泛型接口，使接口中的方法具有类型参数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyGenericInterface</span>&lt;T&gt; {</span><br><span class="line">    T <span class="title function_">getDefaultValue</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>泛型方法 (Generic Method):</strong> 你可以在普通类或非泛型类中定义泛型方法，使用 <code>&lt;&gt;</code> 括起来的类型参数，以便在方法级别处理不同类型的数据。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getFirstElement</span><span class="params">(List&lt;T&gt; list)</span> {</span><br><span class="line">    <span class="keyword">if</span> (list.isEmpty()) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>通配符 (Wildcard):</strong> <code>&lt;&gt;</code> 也用于通配符的定义，通常与泛型方法和泛型类一起使用，以表示某些不确定的类型。</p><ul><li><code>&lt;?&gt;</code> 表示无界通配符，用于表示可以接受任何类型的数据。</li><li><code>&lt;? extends T&gt;</code> 表示上界通配符，用于表示只能接受类型 <code>T</code> 或其子类型的数据。</li><li><code>&lt;? super T&gt;</code> 表示下界通配符，用于表示只能接受类型 <code>T</code> 或其父类型的数据。</li></ul><p>例如，<code>List&lt;?&gt;</code> 表示一个可以包含任何类型的元素的列表。</p></li><li><p><strong>类型参数的使用:</strong> 在使用泛型时，你可以将具体的类型传递给泛型类、泛型接口或泛型方法，以实例化它们。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyGenericClass&lt;Integer&gt; intObject = <span class="keyword">new</span> <span class="title class_">MyGenericClass</span>&lt;&gt;(<span class="number">42</span>);</span><br><span class="line">MyGenericInterface&lt;String&gt; stringObject = <span class="keyword">new</span> <span class="title class_">MyGenericInterface</span>&lt;String&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDefaultValue</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Default"</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></li></ol><p>总之，尖括号 <code>&lt;&gt;</code> 在Java中用于定义和使用泛型，允许你编写更通用和类型安全的代码，以在不同类型的数据上执行操作。泛型提高了代码的重用性和可读性，同时提供了更强的类型检查。</p><h2 id="4-2-collection"><a href="#4-2-collection" class="headerlink" title="4.2 collection"></a>4.2 collection</h2><p><img src="C:\Users\7878\AppData\Roaming\Typora\typora-user-images\image-20230926142725652.png" alt="image-20230926142725652"></p><p>在Java中，<code>Collection</code> 是一个接口，它表示一组对象，通常用于存储和操作多个元素。<code>Collection</code> 接口是Java集合框架的一部分，它定义了一系列用于管理和操作元素集合的通用方法。</p><p><code>Collection</code> 接口是Java集合框架的根接口，它有许多子接口和实现类，包括<code>List</code>、<code>Set</code>、<code>Queue</code>等，每个子接口和实现类都提供了不同的数据结构和行为，以满足不同的需求。</p><p>下面是一些常用的<code>Collection</code>接口的子类：</p><ol><li><strong>List:</strong> <code>List</code> 接口表示有序的元素集合，允许重复元素。常见的实现类包括 <code>ArrayList</code>、<code>LinkedList</code> 和 <code>Vector</code>。你可以按索引访问元素，允许插入、删除和替换元素。</li><li><strong>Set:</strong> <code>Set</code> 接口表示无序的元素集合，不允许重复元素。常见的实现类包括 <code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code>。集合中的元素不按顺序存储，而且不允许重复。</li><li><strong>Queue:</strong> <code>Queue</code> 接口表示一个队列，通常按照先进先出（FIFO）的顺序处理元素。常见的实现类包括 <code>LinkedList</code> 和 <code>PriorityQueue</code>。它通常用于任务调度和处理等场景。</li></ol><p>使用<code>Collection</code>接口和其子接口的步骤如下：</p><ol><li><p><strong>导入必要的包：</strong> 你需要导入<code>java.util</code>包，因为集合框架的类和接口都在这个包中。</p></li><li><p><strong>创建集合对象：</strong> 选择适当的集合实现类，创建一个集合对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 创建一个ArrayList集合</span></span><br><span class="line">Set&lt;Integer&gt; mySet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();   <span class="comment">// 创建一个HashSet集合</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>操作集合：</strong> 使用集合对象的方法来添加、删除、查询和遍历元素。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向List中添加元素</span></span><br><span class="line">myList.add(<span class="string">"Apple"</span>);</span><br><span class="line">myList.add(<span class="string">"Banana"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从Set中删除元素</span></span><br><span class="line">mySet.add(<span class="number">1</span>);</span><br><span class="line">mySet.add(<span class="number">2</span>);</span><br><span class="line">mySet.remove(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历List中的元素</span></span><br><span class="line"><span class="keyword">for</span> (String fruit : myList) {</span><br><span class="line">    System.out.println(fruit);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>其他操作：</strong> 根据需要，可以使用集合的其他方法来执行搜索、排序、过滤等操作。</p></li></ol><p><code>Collection</code> 接口和其子类提供了丰富的方法来处理不同类型的集合，根据具体需求选择合适的集合类型和方法来操作数据。它们是Java中常用的数据结构，用于处理和管理多个元素的集合。</p><h2 id="4-3-List"><a href="#4-3-List" class="headerlink" title="4.3 List"></a>4.3 List</h2><p>在Java中，<code>List</code> 是一个接口，表示有序的元素集合，允许重复元素。<code>List</code> 接口继承自 <code>Collection</code> 接口，并定义了一系列方法，用于操作和管理元素列表。你可以使用<code>List</code>来存储一组元素，并按照它们的插入顺序来访问、添加、删除和修改元素。</p><p>以下是使用 <code>List</code> 的基本步骤：</p><ol><li><p><strong>导入必要的包：</strong> 在使用 <code>List</code> 之前，首先需要导入 <code>java.util</code> 包，因为 <code>List</code> 接口和相关的类都在这个包中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList; <span class="comment">// 或其他List的实现类</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>创建 <code>List</code> 对象：</strong> 选择一个 <code>List</code> 接口的实现类（例如 <code>ArrayList</code>、<code>LinkedList</code> 等），创建一个 <code>List</code> 对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 创建一个ArrayList集合</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>操作 <code>List</code>：</strong> 使用 <code>List</code> 对象的方法来添加、删除、查询和遍历元素。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向List中添加元素</span></span><br><span class="line">myList.add(<span class="string">"Apple"</span>);</span><br><span class="line">myList.add(<span class="string">"Banana"</span>);</span><br><span class="line">myList.add(<span class="string">"Cherry"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取List的大小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> myList.size(); <span class="comment">// 返回3，因为有3个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定位置的元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fruit</span> <span class="operator">=</span> myList.get(<span class="number">1</span>); <span class="comment">// 返回"Banana"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line">myList.set(<span class="number">0</span>, <span class="string">"Orange"</span>); <span class="comment">// 将第一个元素从"Apple"修改为"Orange"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">myList.remove(<span class="number">2</span>); <span class="comment">// 删除第三个元素"Cherry"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历List中的元素</span></span><br><span class="line"><span class="keyword">for</span> (String item : myList) {</span><br><span class="line">    System.out.println(item);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>其他操作：</strong> 根据需要，可以使用 <code>List</code> 的其他方法来执行搜索、排序、过滤等操作。例如，你可以使用 <code>contains</code> 方法检查元素是否存在于列表中，使用 <code>sort</code> 方法对列表进行排序等。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查元素是否存在于List中</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">containsBanana</span> <span class="operator">=</span> myList.contains(<span class="string">"Banana"</span>); <span class="comment">// 返回true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对List进行排序</span></span><br><span class="line">Collections.sort(myList); <span class="comment">// 对列表元素按照自然顺序排序</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>注意事项：</strong></p><ul><li><code>List</code> 是有序的，允许元素重复。元素的顺序由插入顺序决定。</li><li><code>List</code> 的索引从0开始，你可以使用索引来访问元素。</li><li><code>List</code> 接口提供了丰富的方法来处理列表，包括添加、删除、修改、遍历等操作。</li></ul></li></ol><p>根据你的具体需求，选择适当的 <code>List</code> 实现类以及方法来操作元素列表。<code>ArrayList</code> 是一个常用的 <code>List</code> 实现类，通常在不需要频繁插入和删除元素的情况下使用，而 <code>LinkedList</code> 在需要频繁插入和删除元素的情况下可能更加高效。</p><p>对于一个使用迭代器（Iterator）来遍历集合的过程，初始时迭代器并不包含任何元素信息，而是通过 <code>.next()</code> 方法来获取元素的信息。这是因为迭代器是一种用于顺序访问集合中元素的对象，它的初始位置位于第一个元素之前（或集合的开头），只有调用 <code>.next()</code> 方法才会移动迭代器到下一个元素，同时返回当前元素的值。</p><p>以下是解释为什么需要使用 <code>.next()</code> 方法来获取元素信息的原因：</p><ol><li><strong>初始位置在第一个元素之前：</strong> 迭代器的初始位置通常是在集合的第一个元素之前（或集合的开头），这意味着在迭代器创建后，它并不指向任何元素。如果你直接尝试访问迭代器的当前元素，它将返回一个空值或抛出异常。</li><li><strong>控制迭代过程：</strong> 使用 <code>.next()</code> 方法可以精确控制迭代过程，让你决定何时移动到下一个元素。这允许你在处理完当前元素后决定是否继续迭代或停止迭代，从而更加灵活地操作集合中的元素。</li><li><strong>提供当前元素的值：</strong> <code>.next()</code> 方法返回迭代器当前位置的元素，并将迭代器移动到下一个位置。这样，你可以在每次调用 <code>.next()</code> 方法后获得当前元素的值，从而进行进一步的处理，比如打印、修改或使用这个元素。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String id, String name)</span>{</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"id='"</span> + id + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合后面的&lt;&gt;代表泛型的意思</span></span><br><span class="line">    <span class="comment">//泛型是规定了集合元素的类型</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于存放学生的List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListTest</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">this</span>.students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于往students中添加学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 创建一个学生对象，并通过调用add方法，添加到学生管理List中</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">st1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"1"</span>, <span class="string">"张三"</span>);</span><br><span class="line">        students.add(st1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出 List中的Student对象 索引为0 也就是第一个</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">temp</span> <span class="operator">=</span> students.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"添加了学生："</span> + temp.id + <span class="string">":"</span> + temp.name);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">st2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"2"</span>, <span class="string">"李四"</span>);</span><br><span class="line">        <span class="comment">//添加到list中，插入到索引为0的位置，也就是第一个</span></span><br><span class="line">        students.add(<span class="number">0</span>, st2);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">temp2</span> <span class="operator">=</span> students.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"添加了学生："</span> + temp2.id + <span class="string">":"</span> + temp2.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象数组的形式添加</span></span><br><span class="line">        Student[] student = {<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"3"</span>, <span class="string">"王五"</span>), <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"4"</span>, <span class="string">"马六"</span>)};</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Arrays类包含用来操作数组（比如排序和搜索）的各种方法，asList() 方法用来返回一个受指定数组支持的固定大小的列表</span></span><br><span class="line">        students.addAll(Arrays.asList(student));</span><br><span class="line">        <span class="type">Student</span> <span class="variable">temp3</span> <span class="operator">=</span> students.get(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">temp4</span> <span class="operator">=</span> students.get(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"添加了学生："</span> + temp3.id + <span class="string">":"</span> + temp3.name);</span><br><span class="line">        System.out.println(<span class="string">"添加了学生："</span> + temp4.id + <span class="string">":"</span> + temp4.name);</span><br><span class="line">        Student[] student2 = {<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"5"</span>, <span class="string">"周七"</span>), <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"6"</span>, <span class="string">"赵八"</span>)};</span><br><span class="line">        students.addAll(<span class="number">2</span>, Arrays.asList(student2));</span><br><span class="line">        <span class="type">Student</span> <span class="variable">temp5</span> <span class="operator">=</span> students.get(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">temp6</span> <span class="operator">=</span> students.get(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"添加了学生："</span> + temp5.id + <span class="string">":"</span> + temp5.name);</span><br><span class="line">        System.out.println(<span class="string">"添加了学生："</span> + temp6.id + <span class="string">":"</span> + temp6.name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得List中的元素的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> students.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            <span class="type">Student</span> <span class="variable">st</span> <span class="operator">=</span> students.get(i);</span><br><span class="line">            System.out.println(<span class="string">"学生："</span> + st.id + <span class="string">":"</span> + st.name);</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过迭代器来遍历</span></span><br><span class="line"><span class="comment">     * 迭代器的工作是遍历并选择序列中的对象，Java 中 Iterator 只能单向移动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIterator</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 通过集合的iterator方法，取得迭代器实例</span></span><br><span class="line">        Iterator&lt;Student&gt; it = students.iterator();</span><br><span class="line">        System.out.println(<span class="string">"有如下学生（通过迭代器访问）："</span>);</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line"></span><br><span class="line">            <span class="type">Student</span> <span class="variable">st</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(<span class="string">"学生"</span> + st.id + <span class="string">":"</span> + st.name);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过for each 方法访问集合元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testForEach</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"有如下学生（通过for each）："</span>);</span><br><span class="line">        <span class="keyword">for</span> (Student obj : students) {</span><br><span class="line">            <span class="type">Student</span> <span class="variable">st</span> <span class="operator">=</span> obj;</span><br><span class="line">            System.out.println(<span class="string">"学生："</span> + st.id + <span class="string">":"</span> + st.name);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//使用java8 Steam将学生排序后输出</span></span><br><span class="line">        students.stream()<span class="comment">//创建Stream</span></span><br><span class="line">                <span class="comment">//通过学生id排序</span></span><br><span class="line">                .sorted(Comparator.comparing(x -&gt; x.id))</span><br><span class="line">                <span class="comment">//输出</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改List中的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testModify</span><span class="params">()</span> {</span><br><span class="line">        students.set(<span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">"3"</span>, <span class="string">"吴酒"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除List中的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Student</span> <span class="variable">st</span> <span class="operator">=</span> students.get(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">"我是学生："</span> + st.id + <span class="string">":"</span> + st.name + <span class="string">"，我即将被删除"</span>);</span><br><span class="line">        students.remove(st);</span><br><span class="line">        System.out.println(<span class="string">"成功删除学生！"</span>);</span><br><span class="line">        testForEach();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ListTest</span> <span class="variable">lt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListTest</span>();</span><br><span class="line">        lt.testAdd();</span><br><span class="line">        lt.testGet();</span><br><span class="line">        lt.testIterator();</span><br><span class="line">        lt.testModify();</span><br><span class="line">        lt.testForEach();</span><br><span class="line">        lt.testRemove();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>ArrayList</code> 和 <code>Vector</code> 都是 Java 集合框架中的实现了 <code>List</code> 接口的类，它们都用于存储有序的元素集合，允许元素重复，且按照插入顺序进行存储。然而，它们之间存在一些关键区别：</p><ol><li><strong>线程安全性：</strong><ul><li><code>ArrayList</code> 是非线程安全的：<code>ArrayList</code> 不是线程安全的，这意味着在多线程环境中使用 <code>ArrayList</code> 时，需要额外的同步措施，否则可能会导致不确定的行为或数据损坏。</li><li><code>Vector</code> 是线程安全的：<code>Vector</code> 在每个方法上都添加了同步关键字，因此可以在多线程环境中安全使用。然而，这也可能导致在高度并发的情况下性能略有下降。</li></ul></li><li><strong>性能：</strong><ul><li><code>ArrayList</code> 通常比 <code>Vector</code> 更快：由于 <code>Vector</code> 实现了线程同步，因此在单线程环境下，<code>ArrayList</code> 通常比 <code>Vector</code> 更快，因为它不需要额外的同步开销。</li><li><code>Vector</code> 在多线程环境中可能更适用：如果你需要在多线程环境中使用一个线程安全的动态数组，<code>Vector</code> 可能更适合，尽管性能方面可能会略有牺牲。</li></ul></li><li><strong>增长策略：</strong><ul><li><code>ArrayList</code> 的增长策略是增加一半的容量：当 <code>ArrayList</code> 的容量不足以容纳新元素时，它会自动增加其容量，通常是当前容量的一半。这可以减少内存浪费。</li><li><code>Vector</code> 的增长策略是增加一倍的容量：当 <code>Vector</code> 的容量不足时，它会将容量翻倍。这可能导致更多的内存浪费，尤其在容量较大时。</li></ul></li><li><strong>遗留特性：</strong><ul><li><code>Vector</code> 是一个古老的类：<code>Vector</code> 是在Java早期引入的，因此它具有一些遗留的特性，如不支持泛型。相比之下，<code>ArrayList</code> 是在Java 1.2引入的，并支持泛型。</li></ul></li></ol><p>总结：一般情况下，如果你在单线程环境中使用动态数组，<code>ArrayList</code> 是一个更好的选择，因为它具有较好的性能。如果你需要在线程安全的多线程环境中使用动态数组，可以考虑使用 <code>Vector</code>。然而，现代 Java 更倾向于使用 <code>ArrayList</code>，并使用 <code>Collections.synchronizedList</code> 方法来将其转换为线程安全的形式，以获得更好的性能。</p></blockquote><h2 id="4-4-Map"><a href="#4-4-Map" class="headerlink" title="4.4 Map"></a>4.4 Map</h2><p>在 Java 中，<code>Map</code> 是一种非常有用的数据结构，用于存储键值对（key-value pairs）。每个键都唯一，而与每个键关联的值可以重复。<code>Map</code> 提供了一种快速查找和检索值的方式，通常用于表示和管理数据的关联关系。</p><p>以下是 Java 中使用 <code>Map</code> 的基本操作和示例：</p><ol><li>创建一个 Map 对象：</li></ol><p>你可以使用 <code>HashMap</code>、<code>TreeMap</code>、<code>LinkedHashMap</code> 等 <code>Map</code> 的实现类来创建一个 <code>Map</code> 对象。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 创建一个 HashMap，键的类型是 String，值的类型是 Integer</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>添加键值对：</li></ol><p>使用 <code>put</code> 方法将键值对添加到 <code>Map</code> 中：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">"Alice"</span>, <span class="number">25</span>);</span><br><span class="line">map.put(<span class="string">"Bob"</span>, <span class="number">30</span>);</span><br><span class="line">map.put(<span class="string">"Charlie"</span>, <span class="number">28</span>);</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>获取值：</li></ol><p>使用 <code>get</code> 方法根据键获取对应的值：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> map.get(<span class="string">"Alice"</span>); <span class="comment">// 获取键为 "Alice" 的值，age 等于 25</span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>检查键是否存在：</li></ol><p>使用 <code>containsKey</code> 方法来检查某个键是否存在于 <code>Map</code> 中：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">containsAlice</span> <span class="operator">=</span> map.containsKey(<span class="string">"Alice"</span>); <span class="comment">// containsAlice 等于 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">containsDavid</span> <span class="operator">=</span> map.containsKey(<span class="string">"David"</span>); <span class="comment">// containsDavid 等于 false</span></span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>遍历 Map：</li></ol><p>你可以使用不同的方式来遍历 <code>Map</code>，例如使用 <code>keySet()</code>、<code>values()</code> 或 <code>entrySet()</code> 方法。以下是使用 <code>entrySet()</code> 的示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) {</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">    System.out.println(key + <span class="string">" -&gt; "</span> + value);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>删除键值对：</li></ol><p>使用 <code>remove</code> 方法来删除指定键的键值对：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.remove(<span class="string">"Bob"</span>); <span class="comment">// 删除键为 "Bob" 的键值对</span></span><br></pre></td></tr></tbody></table></figure><ol start="7"><li>获取 Map 的大小：</li></ol><p>使用 <code>size</code> 方法获取 <code>Map</code> 中键值对的数量：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> map.size(); <span class="comment">// 获取 Map 中键值对的数量</span></span><br></pre></td></tr></tbody></table></figure><p>这些是 <code>Map</code> 基本操作的示例。<code>Map</code> 提供了强大的功能，可以用于解决各种数据关联问题，如字典、缓存、计数器等。你可以根据具体的需求选择合适的 <code>Map</code> 实现类以及操作方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> {</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Course</span><span class="params">(String id, String name)</span>{</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MapTest.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来承装课程类型对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Course&gt; courses;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在构造器中初始化 courses 属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MapTest</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">this</span>.courses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Course&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试添加：输入课程 ID，判断是否被占用</span></span><br><span class="line"><span class="comment">     * 若未被占用，输入课程名称，创建新课程对象</span></span><br><span class="line"><span class="comment">     * 并且添加到 courses 中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPut</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//创建一个 Scanner 对象，用来获取输入的课程 ID 和名称</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">console</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"请输入课程 ID："</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">ID</span> <span class="operator">=</span> console.next();</span><br><span class="line">            <span class="comment">//判断该 ID 是否被占用</span></span><br><span class="line">            <span class="type">Course</span> <span class="variable">cr</span> <span class="operator">=</span> courses.get(ID);</span><br><span class="line">            <span class="keyword">if</span>(cr == <span class="literal">null</span>){</span><br><span class="line">                <span class="comment">//提示输入课程名称</span></span><br><span class="line">                System.out.println(<span class="string">"请输入课程名称："</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> console.next();</span><br><span class="line">                <span class="comment">//创建新的课程对象</span></span><br><span class="line">                <span class="type">Course</span> <span class="variable">newCourse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>(ID,name);</span><br><span class="line">                <span class="comment">//通过调用 courses 的 put 方法，添加 ID-课程映射</span></span><br><span class="line">                courses.put(ID, newCourse);</span><br><span class="line">                System.out.println(<span class="string">"成功添加课程："</span> + courses.get(ID).name);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                System.out.println(<span class="string">"该课程 ID 已被占用"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 Map 的 keySet 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testKeySet</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//通过 keySet 方法，返回 Map 中的所有键的 Set 集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = courses.keySet();</span><br><span class="line">        <span class="comment">//遍历 keySet，取得每一个键，在调用 get 方法取得每个键对应的 value</span></span><br><span class="line">        <span class="keyword">for</span>(String crID: keySet) {</span><br><span class="line">            <span class="type">Course</span> <span class="variable">cr</span> <span class="operator">=</span> courses.get(crID);</span><br><span class="line">            <span class="keyword">if</span>(cr != <span class="literal">null</span>){</span><br><span class="line">                System.out.println(<span class="string">"课程："</span> + cr.name);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除 Map 中的映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//获取从键盘输入的待删除课程 ID 字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">console</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>){</span><br><span class="line">            <span class="comment">//提示输出待删除的课程 ID</span></span><br><span class="line">            System.out.println(<span class="string">"请输入要删除的课程 ID！"</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">ID</span> <span class="operator">=</span> console.next();</span><br><span class="line">            <span class="comment">//判断该 ID 是否对应的课程对象</span></span><br><span class="line">            <span class="type">Course</span> <span class="variable">cr</span> <span class="operator">=</span> courses.get(ID);</span><br><span class="line">            <span class="keyword">if</span>(cr == <span class="literal">null</span>) {</span><br><span class="line">                <span class="comment">//提示输入的 ID 并不存在</span></span><br><span class="line">                System.out.println(<span class="string">"该 ID 不存在！"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            courses.remove(ID);</span><br><span class="line">            System.out.println(<span class="string">"成功删除课程"</span> + cr.name);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 entrySet 方法来遍历 Map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEntrySet</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//通过 entrySet 方法，返回 Map 中的所有键值对</span></span><br><span class="line">        Set&lt;Entry&lt;String,Course&gt;&gt; entrySet = courses.entrySet();</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;String,Course&gt; entry: entrySet) {</span><br><span class="line">            System.out.println(<span class="string">"取得键："</span> + entry.getKey());</span><br><span class="line">            System.out.println(<span class="string">"对应的值为："</span> + entry.getValue().name);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用 put 方法修改Map 中的已有映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testModify</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//提示输入要修改的课程 ID</span></span><br><span class="line">        System.out.println(<span class="string">"请输入要修改的课程 ID："</span>);</span><br><span class="line">        <span class="comment">//创建一个 Scanner 对象，去获取从键盘上输入的课程 ID 字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">console</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) {</span><br><span class="line">            <span class="comment">//取得从键盘输入的课程 ID</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">crID</span> <span class="operator">=</span> console.next();</span><br><span class="line">            <span class="comment">//从 courses 中查找该课程 ID 对应的对象</span></span><br><span class="line">            <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> courses.get(crID);</span><br><span class="line">            <span class="keyword">if</span>(course == <span class="literal">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"该 ID 不存在！请重新输入！"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//提示当前对应的课程对象的名称</span></span><br><span class="line">            System.out.println(<span class="string">"当前该课程 ID，所对应的课程为："</span> + course.name);</span><br><span class="line">            <span class="comment">//提示输入新的课程名称，来修改已有的映射</span></span><br><span class="line">            System.out.println(<span class="string">"请输入新的课程名称："</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> console.next();</span><br><span class="line">            <span class="type">Course</span> <span class="variable">newCourse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>(crID,name);</span><br><span class="line">            courses.put(crID, newCourse);</span><br><span class="line">            System.out.println(<span class="string">"修改成功！"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">MapTest</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapTest</span>();</span><br><span class="line">        mt.testPut();</span><br><span class="line">        mt.testKeySet();</span><br><span class="line">        mt.testRemove();</span><br><span class="line">        mt.testModify();</span><br><span class="line">        mt.testEntrySet();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-5-Collection"><a href="#4-5-Collection" class="headerlink" title="4.5 Collection"></a>4.5 Collection</h2><p><code>java.util.Collections</code> 类提供了许多实用的静态方法，用于对集合进行操作。以下是一些常见的用法示例：</p><ol><li><p><strong>排序列表</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">numbers.add(<span class="number">3</span>);</span><br><span class="line">numbers.add(<span class="number">1</span>);</span><br><span class="line">numbers.add(<span class="number">2</span>);</span><br><span class="line">Collections.sort(numbers); <span class="comment">// 对列表进行排序</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>反转列表</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">names.add(<span class="string">"Alice"</span>);</span><br><span class="line">names.add(<span class="string">"Bob"</span>);</span><br><span class="line">names.add(<span class="string">"Charlie"</span>);</span><br><span class="line">Collections.reverse(names); <span class="comment">// 反转列表中的元素顺序</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>查找元素</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">numbers.add(<span class="number">1</span>);</span><br><span class="line">numbers.add(<span class="number">2</span>);</span><br><span class="line">numbers.add(<span class="number">3</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Collections.binarySearch(numbers, <span class="number">2</span>); <span class="comment">// 在有序列表中执行二分查找</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>随机打乱列表</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; cards = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">cards.add(<span class="string">"Ace"</span>);</span><br><span class="line">cards.add(<span class="string">"King"</span>);</span><br><span class="line">cards.add(<span class="string">"Queen"</span>);</span><br><span class="line">Collections.shuffle(cards); <span class="comment">// 随机打乱列表中的元素顺序</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>复制列表</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; source = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">source.add(<span class="string">"A"</span>);</span><br><span class="line">source.add(<span class="string">"B"</span>);</span><br><span class="line">List&lt;String&gt; destination = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.copy(destination, source); <span class="comment">// 将一个列表的元素复制到另一个列表中</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>填充列表</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Collections.nCopies(<span class="number">5</span>, <span class="number">0</span>)); <span class="comment">// 使用指定元素填充列表</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>创建不可修改的集合</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; immutableList = Collections.unmodifiableList(originalList); <span class="comment">// 创建不可修改的列表</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="5-异常"><a href="#5-异常" class="headerlink" title="5 异常"></a>5 异常</h1><h2 id="5-1-分类"><a href="#5-1-分类" class="headerlink" title="5.1 分类"></a>5.1 分类</h2><p>在Java中，异常分为三大类：</p><ol><li><p><strong>受检异常（Checked Exceptions）</strong>：</p><ul><li>受检异常是指在编译时必须处理的异常。这些异常通常是由外部因素引起的，比如文件不存在、网络连接问题等。如果一个方法可能会抛出受检异常，要么在方法内部使用<code>try-catch</code>块捕获异常，要么在方法签名中使用<code>throws</code>关键字声明该异常，通知调用者处理异常。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 可能抛出受检异常的代码</span></span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    <span class="comment">// 处理受检异常</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>未受检异常（Unchecked Exceptions，也称为运行时异常）</strong>：<code>RuntimeException</code></p><ul><li>未受检异常是指在运行时可能会发生的异常，通常由程序错误引起，比如空指针异常（<code>NullPointerException</code>）、数组越界异常（<code>ArrayIndexOutOfBoundsException</code>）等。这些异常是<code>RuntimeException</code>类及其子类的实例。在编程中，通常不需要显式地捕获这些异常，但最好是在代码中预防它们的发生。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未受检异常的示例：空指针异常</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length(); <span class="comment">// 这里会抛出空指针异常</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>错误（Errors）</strong>：</p><ul><li>错误是指虚拟机无法处理的严重问题，通常由系统故障引起，比如内存溢出错误（<code>OutOfMemoryError</code>）或虚拟机崩溃。与异常不同，错误通常是不可恢复的。在编写应用程序时，我们不需要关心错误，因为它们通常是由虚拟机或底层系统引起的问题。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的示例：内存溢出错误</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recursiveMethod</span><span class="params">()</span> {</span><br><span class="line">    recursiveMethod();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="5-2-处理"><a href="#5-2-处理" class="headerlink" title="5.2 处理"></a>5.2 处理</h2><p>在Java中，你可以使用<code>throws</code>关键字来声明和抛出异常。异常的声明和抛出通常在方法的签名部分进行。以下是如何声明和抛出异常的一般步骤：</p><ol><li><p><strong>在方法签名中声明异常</strong>：</p><ul><li>在方法的参数列表之后，使用 <code>throws</code> 关键字声明可能会被抛出的异常。可以声明多个异常，用逗号分隔。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> <span class="keyword">throws</span> SomeException, AnotherException {</span><br><span class="line">    <span class="comment">// 方法实现</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>抛出异常</strong>：</p><ul><li>在方法内部，如果满足某个条件导致异常情况，可以使用 <code>throw</code> 关键字抛出异常对象。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> <span class="keyword">throws</span> SomeException {</span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 满足某个条件 */</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SomeException</span>(<span class="string">"发生了某种异常"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 方法继续执行</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>捕获异常</strong>：</p><ul><li>当调用抛出异常的方法时，你必须使用 <code>try-catch</code> 块捕获异常，或者将异常继续向上抛出（再次声明）。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    someMethod();</span><br><span class="line">} <span class="keyword">catch</span> (SomeException e) {</span><br><span class="line">    <span class="comment">// 处理 SomeException 异常</span></span><br><span class="line">} <span class="keyword">catch</span> (AnotherException e) {</span><br><span class="line">    <span class="comment">// 处理 AnotherException 异常</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>继续抛出异常</strong>：</p><ul><li>如果你不打算在当前方法中处理异常，而是希望将异常传递给调用者，可以在方法中继续使用 <code>throws</code> 关键字声明异常。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> <span class="keyword">throws</span> SomeException {</span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 满足某个条件 */</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SomeException</span>(<span class="string">"发生了某种异常"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 方法继续执行</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>通过这种方式，你可以在程序中声明和抛出异常，并根据需要进行适当的异常处理或传递。</p><h2 id="5-3-多异常处理"><a href="#5-3-多异常处理" class="headerlink" title="5.3 多异常处理"></a>5.3 多异常处理</h2><p>在Java中，你可以使用多个 <code>catch</code> 块来捕获多种异常。每个 <code>catch</code> 块用于捕获特定类型的异常，并提供相应的处理逻辑。下面是捕获多个异常的基本语法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 一些可能抛出异常的代码</span></span><br><span class="line">} <span class="keyword">catch</span> (ExceptionType1 e1) {</span><br><span class="line">    <span class="comment">// 处理 ExceptionType1 类型的异常</span></span><br><span class="line">} <span class="keyword">catch</span> (ExceptionType2 e2) {</span><br><span class="line">    <span class="comment">// 处理 ExceptionType2 类型的异常</span></span><br><span class="line">} <span class="keyword">catch</span> (ExceptionType3 e3) {</span><br><span class="line">    <span class="comment">// 处理 ExceptionType3 类型的异常</span></span><br><span class="line">} <span class="comment">// and so on for more catch blocks</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在 <code>try</code> 块中，你编写可能抛出异常的代码。</li><li>对于每种可能抛出的异常类型，你可以使用一个 <code>catch</code> 块来捕获和处理该类型的异常。</li><li>按照需要，你可以定义多个 <code>catch</code> 块，每个 <code>catch</code> 块捕获不同类型的异常，并提供相应的处理逻辑。</li></ul><p>如果某个异常类型是另一个异常类型的子类，它应该在其父类之后捕获，因为Java编译器会按照从子类到父类的顺序进行匹配。</p><h2 id="5-4-自定义异常"><a href="#5-4-自定义异常" class="headerlink" title="5.4 自定义异常"></a>5.4 自定义异常</h2><p>在Java中，你可以通过创建一个继承自<code>Exception</code>或<code>RuntimeException</code>的类来自定义异常。这个自定义异常类应该提供自定义异常的特定行为和信息。</p><p>以下是创建自定义异常的基本步骤：</p><p>创建自定义异常类</p><ul><li>创建一个继承自 <code>Exception</code>（受检异常）或 <code>RuntimeException</code>（未受检异常）的类。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义受检异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCheckedException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomCheckedException</span><span class="params">(String message)</span> {</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义未受检异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomUncheckedException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomUncheckedException</span><span class="params">(String message)</span> {</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>添加构造函数</strong>：</p><ul><li>在自定义异常类中，添加构造函数以接受异常消息并调用父类的构造函数。</li></ul><p><strong>使用自定义异常</strong>：</p><ul><li>在需要抛出自定义异常的代码中，创建自定义异常的对象并抛出。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> <span class="keyword">throws</span> CustomCheckedException {</span><br><span class="line">        <span class="comment">// 某些情况下抛出自定义受检异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomCheckedException</span>(<span class="string">"这是自定义受检异常"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">anotherMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 某些情况下抛出自定义未受检异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomUncheckedException</span>(<span class="string">"这是自定义未受检异常"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>捕获自定义异常</p><ul><li>在调用抛出自定义异常的方法时，你可以使用 <code>try-catch</code> 块捕获自定义异常并处理它。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="type">Example</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">    example.someMethod();</span><br><span class="line">} <span class="keyword">catch</span> (CustomCheckedException e) {</span><br><span class="line">    <span class="comment">// 处理自定义受检异常</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-5-异常堆栈"><a href="#5-5-异常堆栈" class="headerlink" title="5.5 异常堆栈"></a>5.5 异常堆栈</h2><p>异常堆栈（也称为堆栈跟踪或调用堆栈）是在程序执行过程中发生异常时记录的一组调用方法的信息。它提供了一个关于异常发生位置和异常传播路径的详细视图。异常堆栈通常包括以下信息：</p><ol><li>方法调用顺序：异常堆栈列出了程序中从发生异常的地方开始到异常被捕获或程序终止的方法调用序列。这些方法调用以栈的形式排列，最上面的是最近调用的方法，最下面的是最初的调用。</li><li>类名和方法名：堆栈中的每个元素都包括了引发异常的方法的类名和方法名。这有助于确定异常发生的确切位置。</li><li>行号信息：通常，异常堆栈还包括了引发异常的方法中出现异常的代码行号。这使得程序员能够准确定位问题代码的位置。</li></ol><p>异常堆栈对于调试和诊断问题非常有用。当程序抛出异常时，异常堆栈可以帮助开发人员追踪异常的来源，找出问题的根本原因，并更轻松地修复代码中的错误。堆栈跟踪也可以用于记录异常，以便后续的故障排除或错误报告。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionStackTrace</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> {</span><br><span class="line">        method2();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            method1();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="comment">//打印堆栈轨迹</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException</span><br><span class="line">    at ExceptionStackTrace.method2(ExceptionStackTrace.java:<span class="number">7</span>)</span><br><span class="line">    at ExceptionStackTrace.method1(ExceptionStackTrace.java:<span class="number">3</span>)</span><br><span class="line">    at ExceptionStackTrace.main(ExceptionStackTrace.java:<span class="number">11</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="6-Lambda"><a href="#6-Lambda" class="headerlink" title="6 Lambda"></a>6 Lambda</h1><h2 id="6-1-使用"><a href="#6-1-使用" class="headerlink" title="6.1 使用"></a>6.1 使用</h2><p>Lambda表达式是Java 8引入的一种函数式编程特性，用于简化匿名内部类的编写以及在函数式接口中定义行为。要实现Lambda表达式，你需要按照以下基本语法规则进行操作：</p><ol><li><strong>确定函数式接口</strong>：首先，你需要有一个函数式接口，它只包含一个抽象方法。函数式接口是一个具有单个抽象方法的接口。</li><li><strong>定义Lambda表达式</strong>：Lambda表达式的一般形式是 <code>(参数) -&gt; 表达式</code>。参数是方法的参数，表达式是方法的实现。可以使用箭头符号 <code>-&gt;</code> 分隔参数和表达式。</li><li><strong>调用Lambda表达式</strong>：将Lambda表达式分配给一个接口类型的变量，然后可以使用该变量来调用Lambda表达式。</li></ol><p>下面是一个简单示例，展示如何创建和使用Lambda表达式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤 1：确定函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyFunction</span> {</span><br><span class="line">    <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 步骤 2：定义Lambda表达式</span></span><br><span class="line">        <span class="type">MyFunction</span> <span class="variable">addition</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line">        <span class="type">MyFunction</span> <span class="variable">subtraction</span> <span class="operator">=</span> (a, b) -&gt; a - b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤 3：调用Lambda表达式</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> addition.apply(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 调用Lambda表达式执行加法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> subtraction.apply(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 调用Lambda表达式执行减法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Addition result: "</span> + result1);</span><br><span class="line">        System.out.println(<span class="string">"Subtraction result: "</span> + result2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们首先定义了一个函数式接口 <code>MyFunction</code>，它具有一个抽象方法 <code>apply</code>。然后，我们创建了两个Lambda表达式 <code>addition</code> 和 <code>subtraction</code>，并使用它们执行加法和减法操作。</p><p>Lambda表达式的强大之处在于可以将它们传递给方法、将它们作为参数传递给其他方法，并以一种简洁的方式表达行为。这在处理集合、多线程等场景中非常有用。</p><h2 id="6-2-作用域"><a href="#6-2-作用域" class="headerlink" title="6.2 作用域"></a>6.2 作用域</h2><p>Lambda表达式的作用域是指Lambda表达式可以访问哪些变量以及它们的生命周期。Lambda表达式的作用域是根据以下规则确定的：</p><ol><li><strong>局部变量</strong>：Lambda表达式可以访问外部方法中的局部变量，但这些局部变量必须满足以下条件：<ul><li>局部变量必须是隐式或显式地声明为 <code>final</code> 或 <code>effectively final</code>。这意味着一旦赋值后，不能再修改这些变量的值。从Java 8开始，如果变量在赋值后没有被再次赋值，它被认为是”effectively final”。</li><li>如果Lambda表达式在一个线程中使用了某个局部变量，那么这个变量必须是线程安全的。</li></ul></li><li><strong>成员变量和静态变量</strong>：Lambda表达式可以自由访问包含它的类的成员变量和静态变量，就像普通的类方法一样。</li><li><strong>方法参数</strong>：Lambda表达式可以访问外部方法的参数，但参数也必须是 <code>final</code> 或 <code>effectively final</code>。</li></ol><p>下面是一个示例，演示了Lambda表达式的作用域：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaScopeExample</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">instanceVar</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticVar</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambdaInMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">30</span>; <span class="comment">// 局部变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Lambda 表达式可以访问局部变量 localVar 和 instanceVar，以及静态变量 staticVar</span></span><br><span class="line">        <span class="type">MyFunctionalInterface</span> <span class="variable">myLambda</span> <span class="operator">=</span> () -&gt; {</span><br><span class="line">            System.out.println(<span class="string">"instanceVar: "</span> + instanceVar);</span><br><span class="line">            System.out.println(<span class="string">"staticVar: "</span> + staticVar);</span><br><span class="line">            System.out.println(<span class="string">"localVar: "</span> + localVar);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        myLambda.doSomething();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">LambdaScopeExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaScopeExample</span>();</span><br><span class="line">        example.lambdaInMethod();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">MyFunctionalInterface</span> {</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，Lambda表达式 <code>myLambda</code> 可以访问 <code>instanceVar</code>（成员变量）、<code>staticVar</code>（静态变量），以及 <code>localVar</code>（局部变量），因为它们都符合Lambda表达式的作用域规则。如果你尝试在Lambda表达式内部修改 <code>localVar</code> 的值，将会导致编译错误，因为它不是<code>final</code>或<code>effectively final</code>的。</p><blockquote><p>相对于普通的类方法，Lambda表达式的主要区别在于它们可以访问外部作用域的变量，这是通过闭包实现的。以下是Lambda表达式与普通类方法之间的主要区别：</p><ol><li><strong>变量访问</strong>：<ul><li><strong>Lambda表达式</strong>：Lambda表达式可以访问包含它们的方法的局部变量（必须是<code>final</code>或<code>effectively final</code>），成员变量，以及静态变量。</li><li><strong>普通类方法</strong>：普通类方法只能访问它们所属类的成员变量和静态变量，不能直接访问方法中的局部变量。</li></ul></li><li><strong>this关键字</strong>：<ul><li><strong>Lambda表达式</strong>：Lambda表达式中的<code>this</code>关键字指向它所在的外部类。</li><li><strong>普通类方法</strong>：普通类方法中的<code>this</code>关键字指向该类的实例。</li></ul></li><li><strong>对接口的依赖</strong>：<ul><li><strong>Lambda表达式</strong>：Lambda表达式依赖于函数式接口，即接口中只有一个抽象方法。它们可以实现该接口并提供方法实现。</li><li><strong>普通类方法</strong>：普通类方法可以属于任何类，无需依赖于特定的接口。</li></ul></li><li><strong>简洁性</strong>：<ul><li><strong>Lambda表达式</strong>：Lambda表达式通常比传统的匿名内部类更为简洁，可以在更少的代码行中表达相同的逻辑。</li></ul></li><li><strong>使用场景</strong>：<ul><li><strong>Lambda表达式</strong>：适用于简单的功能接口实现，尤其是在集合处理、线程处理等函数式编程场景中。</li><li><strong>普通类方法</strong>：适用于一般的方法实现，可能需要较多的代码和复杂的逻辑。</li></ul></li></ol><p>总的来说，Lambda表达式提供了一种更简洁、更函数式的方法来实现特定的功能接口，特别适用于对集合进行操作或实现简单功能的情况。它们使得代码更为紧凑，更容易理解和维护。然而，在某些情况下，传统的类方法可能更适合复杂的业务逻辑或需要多个方法的情况。</p></blockquote><h2 id="6-3-方法引用"><a href="#6-3-方法引用" class="headerlink" title="6.3 方法引用"></a>6.3 方法引用</h2><p>在Java中，方法引用是一种简化Lambda表达式的语法，用于调用已经存在的方法。它可以替代Lambda表达式，使代码更加简洁易读。</p><p>方法引用通常用于函数式接口的实例化，函数式接口是只包含一个抽象方法的接口。方法引用可以用来引用以下类型的方法：</p><ol><li>静态方法引用：引用静态方法。</li><li>对象方法引用：引用特定对象的实例方法。</li><li>类型方法引用：引用特定类型的任意对象的实例方法。</li></ol><p>以下是一些方法引用的示例：</p><ul><li><p>静态方法引用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法引用调用静态方法</span></span><br><span class="line">Function&lt;Integer, Integer&gt; square = Math::square;</span><br></pre></td></tr></tbody></table></figure></li><li><p>对象方法引用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法引用调用实例方法</span></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>);</span><br><span class="line">names.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure></li><li><p>类型方法引用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法引用调用类型方法</span></span><br><span class="line">Comparator&lt;String&gt; stringComparator = String::compareToIgnoreCase;</span><br></pre></td></tr></tbody></table></figure></li></ul><p>方法引用通过<code>::</code>符号后跟方法名来引用方法，而不需要提供方法的具体实现，编译器会根据上下文自动推断。</p><h2 id="6-4-函数式编程"><a href="#6-4-函数式编程" class="headerlink" title="6.4 函数式编程"></a>6.4 函数式编程</h2><p><code>java.util.Function</code> 是一个函数式接口，它接受一个输入参数并返回一个结果。它定义了一个名为 <code>apply</code> 的抽象方法，用于将输入转换为输出。</p><p>该接口通常用于将操作作为参数传递给其他方法，例如在 Stream API 中进行数据处理，或者在函数式编程中进行函数组合。</p><p>以下是一个简单的示例，演示了如何使用 <code>java.util.Function</code> 接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建一个 Function，将输入值乘以2并返回</span></span><br><span class="line">        Function&lt;Integer, Integer&gt; multiplyBy2 = x -&gt; x * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 apply 方法应用函数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> multiplyBy2.apply(<span class="number">5</span>); <span class="comment">// 结果为 10</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，我们首先创建了一个 <code>Function</code> 对象 <code>multiplyBy2</code>，它将输入值乘以2。然后，我们调用 <code>apply</code> 方法将输入值 <code>5</code> 应用到函数上，得到了结果 <code>10</code>。</p><ol><li><strong>Consumer (消费者)：</strong><ul><li><strong>描述：</strong> 表示接受单个输入参数并且不返回结果的操作。</li><li><strong>接口方法：</strong> <code>void accept(T t)</code></li></ul></li><li><strong>Function (函数)：</strong><ul><li><strong>描述：</strong> 表示接受一个输入参数并产生一个结果的函数。</li><li><strong>接口方法：</strong> <code>R apply(T t)</code></li></ul></li><li><strong>Supplier (供应商)：</strong><ul><li><strong>描述：</strong> 表示一个供应商，不接受任何参数，但返回一个结果。</li><li><strong>接口方法：</strong> <code>T get()</code></li></ul></li><li><strong>Predicate (断言)：</strong><ul><li><strong>描述：</strong> 表示一个断言（布尔值函数），接受一个参数并返回一个布尔值结果。</li><li><strong>接口方法：</strong> <code>boolean test(T t)</code></li></ul></li><li><strong>UnaryOperator (一元操作符)：</strong><ul><li><strong>描述：</strong> 表示一个一元操作符，接受一个参数并返回与该参数相同类型的结果。</li><li><strong>接口方法：</strong> <code>T apply(T t)</code></li></ul></li><li><strong>BinaryOperator (二元操作符)：</strong><ul><li><strong>描述：</strong> 表示一个二元操作符，接受两个参数并返回与参数相同类型的结果。</li><li><strong>接口方法：</strong> <code>T apply(T t1, T t2)</code></li></ul></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionTest</span> {</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>{</span><br><span class="line">      <span class="comment">// 创建一个包含整数的列表</span></span><br><span class="line">      List&lt;Integer&gt; list = Arrays.asList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"All of the numbers:"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用 Predicate 过滤并打印所有数字</span></span><br><span class="line">      eval(list, n-&gt;<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"Even numbers:"</span>);</span><br><span class="line">      <span class="comment">// 使用 Predicate 过滤并打印偶数</span></span><br><span class="line">      eval(list, n-&gt; n%<span class="number">2</span> == <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"Numbers that are greater than 5:"</span>);</span><br><span class="line">      <span class="comment">// 使用 Predicate 过滤并打印大于5的数字</span></span><br><span class="line">      eval(list, n -&gt; n &gt; <span class="number">5</span> );</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 通用的方法，接受列表和 Predicate，用于过滤和打印符合条件的元素</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eval</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> {</span><br><span class="line">      <span class="keyword">for</span>(Integer n: list) {</span><br><span class="line">         <span class="comment">// 使用 Predicate 测试元素是否满足条件，然后打印符合条件的元素</span></span><br><span class="line">         <span class="keyword">if</span>(predicate.test(n)) {</span><br><span class="line">            System.out.println(n);</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="7-Stream"><a href="#7-Stream" class="headerlink" title="7 Stream"></a>7 Stream</h1><h2 id="7-1-创建流"><a href="#7-1-创建流" class="headerlink" title="7.1 创建流"></a>7.1 创建流</h2><p>要创建一个流（Stream）对象，你可以使用以下方式：</p><ol><li>从集合创建流：你可以从集合（如List、Set、Map等）创建一个流。Java中的集合提供了<code>stream()</code>方法来生成流。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; myList = Arrays.asList(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"cherry"</span>);</span><br><span class="line">Stream&lt;String&gt; stream = myList.stream();</span><br></pre></td></tr></tbody></table></figure><ol><li>从数组创建流：你也可以从数组创建流，使用<code>Arrays.stream()</code>方法。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(numbers);</span><br></pre></td></tr></tbody></table></figure><ol><li>使用Stream.of()创建流：你可以使用<code>Stream.of()</code>方法创建一个包含指定元素的流。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"cherry"</span>);</span><br></pre></td></tr></tbody></table></figure><ol><li>使用Stream.generate()创建无限流：如果需要创建一个无限流，可以使用<code>Stream.generate()</code>方法，并传入一个生成元素的Supplier。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; infiniteStream = Stream.generate(() -&gt; <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><ol><li>使用Stream.iterate()创建无限流：类似于<code>Stream.generate()</code>，你也可以使用<code>Stream.iterate()</code>创建一个无限流，但需要提供一个初始值和一个UnaryOperator来生成后续的值。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; infiniteStream = Stream.iterate(<span class="number">1</span>, n -&gt; n + <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="7-2-操作流"><a href="#7-2-操作流" class="headerlink" title="7.2 操作流"></a>7.2 操作流</h2><p>当使用Java中的<code>Stream</code>时，你可以执行各种操作，包括中间操作和终端操作。以下是一些<code>Stream</code>的常见用法，以及相应的示例：</p><p><strong>1. 过滤（Filter）：</strong> 使用<code>filter</code>中间操作来筛选出满足条件的元素。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">List&lt;Integer&gt; evenNumbers = numbers.stream()</span><br><span class="line">    .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"><span class="comment">// evenNumbers 现在包含 [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></tbody></table></figure><p><strong>2. 映射（Map）：</strong> 使用<code>map</code>中间操作将元素映射成新的值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>);</span><br><span class="line">List&lt;Integer&gt; nameLengths = names.stream()</span><br><span class="line">    .map(String::length)</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"><span class="comment">// nameLengths 现在包含 [5, 3, 7]</span></span><br></pre></td></tr></tbody></table></figure><p><strong>3. 排序（Sort）：</strong> 使用<code>sorted</code>中间操作对元素进行排序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line">List&lt;Integer&gt; sortedNumbers = numbers.stream()</span><br><span class="line">    .sorted()</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"><span class="comment">// sortedNumbers 现在包含 [1, 2, 5, 8, 9]</span></span><br></pre></td></tr></tbody></table></figure><p><strong>4. 聚合（Reduce）：</strong> 使用<code>reduce</code>终端操作对元素进行聚合操作，如求和、求最大值、求最小值等。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">    .reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</span><br><span class="line"><span class="comment">// sum 现在等于 15</span></span><br></pre></td></tr></tbody></table></figure><p><strong>5. 收集（Collect）：</strong> 使用<code>collect</code>终端操作将流中的元素收集到一个集合中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; fruits = Arrays.asList(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"cherry"</span>);</span><br><span class="line">Set&lt;String&gt; fruitSet = fruits.stream()</span><br><span class="line">    .collect(Collectors.toSet());</span><br><span class="line"><span class="comment">// fruitSet 现在包含 {"apple", "banana", "cherry"}</span></span><br></pre></td></tr></tbody></table></figure><p><strong>6. 遍历（ForEach）：</strong> 使用<code>forEach</code>终端操作对流中的每个元素执行指定操作。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">numbers.stream()</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"><span class="comment">// 将每个数字打印到控制台</span></span><br></pre></td></tr></tbody></table></figure><p>在Java中，<code>peek()</code> 方法是Java流（Stream）类提供的一个中间操作方法之一。它允许你在流的每个元素被处理时执行一个操作，但不会改变流的内容，而是返回原始流。<code>peek()</code> 方法通常用于调试和观察流的操作，以便查看流的中间状态，而不会影响流的最终结果。</p><p>该方法的签名如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">peek</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span></span><br></pre></td></tr></tbody></table></figure><p>其中，<code>action</code> 是一个接受类型为 <code>T</code> 的元素的消费者函数，你可以在这个函数中执行任何你想要的操作。</p><p>例如，假设你有一个整数流，你可以使用 <code>peek()</code> 方法来打印每个元素，并查看它们的值，而不改变流的内容：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">numbers.stream()</span><br><span class="line">       .peek(num -&gt; System.out.println(<span class="string">"Processing: "</span> + num))</span><br><span class="line">       .map(num -&gt; num * <span class="number">2</span>)</span><br><span class="line">       .forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，<code>peek()</code> 方法用于输出每个元素的处理状态，但不会更改流的元素。然后，<code>map()</code> 方法将每个元素乘以2，最后使用 <code>forEach()</code> 方法打印结果。这个操作链允许你在流的处理过程中观察元素的中间状态。</p><h2 id="7-3-Collectors"><a href="#7-3-Collectors" class="headerlink" title="7.3 Collectors"></a>7.3 Collectors</h2><p><code>Collectors</code> 是 Java 中用于收集（或汇总）流中元素的工具类，它提供了各种用于收集数据的静态方法。<code>Collectors</code> 的主要用法包括：</p><p><strong>1. 收集到List、Set或其他集合类型：</strong></p><ul><li><code>Collectors.toList()</code>：将流中的元素收集到一个<code>List</code>中。</li><li><code>Collectors.toSet()</code>：将流中的元素收集到一个<code>Set</code>中。</li><li><code>Collectors.toCollection(collectionFactory)</code>：将流中的元素收集到指定类型的集合中。</li></ul><p>示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Stream.of(<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>)</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></tbody></table></figure><p><strong>2. 收集到Map：</strong></p><ul><li><code>Collectors.toMap(keyMapper, valueMapper)</code>：将流中的元素收集到一个<code>Map</code>中，可以指定如何映射键和值。</li><li><code>Collectors.toConcurrentMap(keyMapper, valueMapper)</code>：类似于<code>toMap</code>，但返回的是一个并发安全的<code>ConcurrentMap</code>。</li></ul><p>示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; nameLengthMap = Stream.of(<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>)</span><br><span class="line">    .collect(Collectors.toMap(name -&gt; name, String::length));</span><br></pre></td></tr></tbody></table></figure><p><strong>3. 字符串连接：</strong></p><ul><li><code>Collectors.joining(delimiter)</code>：将流中的元素连接成一个字符串，可以指定连接符。</li></ul><p>示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">joinedNames</span> <span class="operator">=</span> Stream.of(<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>)</span><br><span class="line">    .collect(Collectors.joining(<span class="string">", "</span>));</span><br><span class="line"><span class="comment">// joinedNames 现在等于 "Alice, Bob, Charlie"</span></span><br></pre></td></tr></tbody></table></figure><p><strong>4. 统计汇总信息：</strong></p><ul><li><code>Collectors.summarizingInt(ToIntFunction)</code>：对<code>int</code>类型的元素进行汇总，包括计数、总和、最大值、最小值、平均值等信息。</li><li><code>Collectors.summarizingDouble(ToDoubleFunction)</code>：类似于<code>summarizingInt</code>，但适用于<code>double</code>类型的元素。</li></ul><p>示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    .collect(Collectors.summarizingInt(Integer::intValue));</span><br></pre></td></tr></tbody></table></figure><p><strong>5. 分组和分区：</strong></p><ul><li><code>Collectors.groupingBy(classifier)</code>：根据指定条件对元素进行分组，返回一个<code>Map</code>，键是分组条件，值是分组的元素列表。</li><li><code>Collectors.partitioningBy(predicate)</code>：根据指定条件将元素分成两组（true和false），返回一个<code>Map</code>，键是true或false，值是符合条件的元素列表。</li></ul><p>示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;String&gt;&gt; groupByLength = Stream.of(<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>)</span><br><span class="line">    .collect(Collectors.groupingBy(String::length));</span><br><span class="line">Map&lt;Boolean, List&lt;String&gt;&gt; partitionByLength = Stream.of(<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>)</span><br><span class="line">    .collect(Collectors.partitioningBy(name -&gt; name.length() &gt; <span class="number">4</span>));</span><br></pre></td></tr></tbody></table></figure><h2 id="7-4-flatMap"><a href="#7-4-flatMap" class="headerlink" title="7.4 flatMap"></a>7.4 flatMap</h2><p>你可以使用Java中的Stream API中的<code>flatMap</code>方法来操作流并实现合并和转换的功能。下面是使用<code>flatMap</code>的一些常见示例和用法：</p><p><strong>示例1：合并多个流</strong></p><p>假设你有多个字符串流，想将它们合并成一个单一的字符串流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream1 = Stream.of(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.of(<span class="string">"Java"</span>, <span class="string">"Programming"</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; mergedStream = Stream.of(stream1, stream2)</span><br><span class="line">    .flatMap(Function.identity());</span><br><span class="line"></span><br><span class="line">mergedStream.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure><p>这会输出：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">Java</span><br><span class="line">Programming</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们使用<code>flatMap</code>合并了<code>stream1</code>和<code>stream2</code>，并通过<code>Function.identity()</code>函数将它们扁平化。</p><p><strong>示例2：元素转换</strong></p><p>假设你有一个字符串流，想将每个字符串拆分为单词并得到单词的流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">"Hello World"</span>, <span class="string">"Java Programming"</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; wordStream = stringStream</span><br><span class="line">    .flatMap(str -&gt; Stream.of(str.split(<span class="string">" "</span>)));</span><br><span class="line"></span><br><span class="line">wordStream.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure><p>这会输出：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">Java</span><br><span class="line">Programming</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们使用<code>flatMap</code>将每个字符串分割为单词，并将它们合并成一个单词流。</p><p><strong>示例3：扁平化嵌套集合</strong></p><p>假设你有一个包含多个子集合的集合，想将它们扁平化为单一流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; nestedList = Arrays.asList(</span><br><span class="line">    Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">    Arrays.asList(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">    Arrays.asList(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; flattenedStream = nestedList</span><br><span class="line">    .stream()</span><br><span class="line">    .flatMap(List::stream);</span><br><span class="line"></span><br><span class="line">flattenedStream.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure><p>这会输出：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们使用<code>flatMap</code>将嵌套的列表转换为单一流，以便更容易处理其中的元素。</p><h2 id="7-5-实例"><a href="#7-5-实例" class="headerlink" title="7.5 实例"></a>7.5 实例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.IntSummaryStatistics;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> {</span><br><span class="line">        System.out.println(<span class="string">"Using Java 7: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计空字符串的数量</span></span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">"efg"</span>, <span class="string">""</span>, <span class="string">"abc"</span>, <span class="string">"bc"</span>, <span class="string">"ghij"</span>, <span class="string">""</span>, <span class="string">"lmn"</span>);</span><br><span class="line">        System.out.println(<span class="string">"List: "</span> + strings);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> getCountEmptyStringUsingJava7(strings);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Empty Strings: "</span> + count);</span><br><span class="line">        count = getCountLength3UsingJava7(strings);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Strings of length 3: "</span> + count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消除空字符串</span></span><br><span class="line">        List&lt;String&gt; filtered = deleteEmptyStringsUsingJava7(strings);</span><br><span class="line">        System.out.println(<span class="string">"Filtered List: "</span> + filtered);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消除空字符串，同时使用逗号来连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mergedString</span> <span class="operator">=</span> getMergedStringUsingJava7(strings, <span class="string">", "</span>);</span><br><span class="line">        System.out.println(<span class="string">"Merged String: "</span> + mergedString);</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得不同数字的平方的列表</span></span><br><span class="line">        List&lt;Integer&gt; squaresList = getSquares(numbers);</span><br><span class="line">        System.out.println(<span class="string">"Squares List: "</span> + squaresList);</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"List: "</span> + integers);</span><br><span class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + getMax(integers));</span><br><span class="line">        System.out.println(<span class="string">"Lowest number in List : "</span> + getMin(integers));</span><br><span class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + getSum(integers));</span><br><span class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + getAverage(integers));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出10个随机数</span></span><br><span class="line">        System.out.println(<span class="string">"Random Numbers: "</span>);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">            System.out.println(random.nextInt());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Java 8的新特性</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Using Java 8: "</span>);</span><br><span class="line">        System.out.println(<span class="string">"List: "</span> + strings);</span><br><span class="line"></span><br><span class="line">        count = strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line">        System.out.println(<span class="string">"Empty Strings: "</span> + count);</span><br><span class="line"></span><br><span class="line">        count = strings.stream().filter(string -&gt; string.length() == <span class="number">3</span>).count();</span><br><span class="line">        System.out.println(<span class="string">"Strings of length 3: "</span> + count);</span><br><span class="line"></span><br><span class="line">        filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"Filtered List: "</span> + filtered);</span><br><span class="line"></span><br><span class="line">        mergedString = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class="string">", "</span>));</span><br><span class="line">        System.out.println(<span class="string">"Merged String: "</span> + mergedString);</span><br><span class="line"></span><br><span class="line">        squaresList = numbers.stream().map(i -&gt; i * i).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"Squares List: "</span> + squaresList);</span><br><span class="line">        System.out.println(<span class="string">"List: "</span> + integers);</span><br><span class="line"></span><br><span class="line">        <span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> integers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">"Lowest number in List : "</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</span><br><span class="line">        System.out.println(<span class="string">"Random Numbers: "</span>);</span><br><span class="line"></span><br><span class="line">        random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行处理</span></span><br><span class="line">        count = strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line">        System.out.println(<span class="string">"Empty Strings: "</span> + count);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Java 7版本就提供的API来计算空串数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCountEmptyStringUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (string.isEmpty()) {</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Java 7版本就提供的API来计算长度为3字符的字符串数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCountLength3UsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (string.length() == <span class="number">3</span>) {</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Java 7版本就提供的API来删除空串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">deleteEmptyStringsUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> {</span><br><span class="line">        List&lt;String&gt; filteredList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!string.isEmpty()) {</span><br><span class="line">                filteredList.add(string);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> filteredList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Java 7版本就提供的API来获取合并后的字符串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getMergedStringUsingJava7</span><span class="params">(List&lt;String&gt; strings, String separator)</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!string.isEmpty()) {</span><br><span class="line">                stringBuilder.append(string);</span><br><span class="line">                stringBuilder.append(separator);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">String</span> <span class="variable">mergedString</span> <span class="operator">=</span> stringBuilder.toString();</span><br><span class="line">        <span class="keyword">return</span> mergedString.substring(<span class="number">0</span>, mergedString.length() - <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的用于计算数字的平方的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">getSquares</span><span class="params">(List&lt;Integer&gt; numbers)</span> {</span><br><span class="line">        List&lt;Integer&gt; squaresList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer number : numbers) {</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">square</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(number.intValue() * number.intValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!squaresList.contains(square)) {</span><br><span class="line">                squaresList.add(square);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> squaresList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的用于获得List中最大值的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(List&lt;Integer&gt; numbers)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numbers.size(); i++) {</span><br><span class="line"></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (number.intValue() &gt; max) {</span><br><span class="line">                max = number.intValue();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的用于获得List中最小值的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">(List&lt;Integer&gt; numbers)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numbers.size(); i++) {</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (number.intValue() &lt; min) {</span><br><span class="line">                min = number.intValue();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的用于获得List中各个数字的和的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(List&lt;Integer&gt; numbers)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">int</span>) (numbers.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numbers.size(); i++) {</span><br><span class="line">            sum += (<span class="type">int</span>) numbers.get(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的用于获得List中各个数字的平均值的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getAverage</span><span class="params">(List&lt;Integer&gt; numbers)</span> {</span><br><span class="line">        <span class="keyword">return</span> getSum(numbers) / numbers.size();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="8-IO"><a href="#8-IO" class="headerlink" title="8 IO"></a>8 IO</h1><h2 id="8-1-文件"><a href="#8-1-文件" class="headerlink" title="8.1 文件"></a>8.1 文件</h2><p><code>java.io.File</code> 类是 Java 中用于操作文件和目录的基本类之一。它允许你创建、删除、重命名、查询文件和目录的属性等操作。以下是一些常见的 <code>File</code> 类的用法和示例：</p><ol><li><p>创建 <code>File</code> 对象：</p><ul><li>通过指定文件或目录的路径来创建 <code>File</code> 对象。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"/path/to/file.txt"</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"/path/to/directory"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>检查文件或目录是否存在：</p><ul><li>使用 <code>exists()</code> 方法检查文件或目录是否存在。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> file.exists();</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建文件或目录：</p><ul><li>使用 <code>createNewFile()</code> 方法创建文件。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">created</span> <span class="operator">=</span> file.createNewFile();</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 <code>mkdir()</code> 方法创建目录。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">created</span> <span class="operator">=</span> directory.mkdir();</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除文件或目录：</p><ul><li>使用 <code>delete()</code> 方法删除文件或目录。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">deleted</span> <span class="operator">=</span> file.delete();</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取文件或目录的属性：</p><ul><li>使用 <code>getName()</code> 方法获取文件或目录的名称。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName();</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 <code>isFile()</code> 和 <code>isDirectory()</code> 方法检查文件或目录的类型。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isFile</span> <span class="operator">=</span> file.isFile();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isDirectory</span> <span class="operator">=</span> directory.isDirectory();</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取文件大小和最后修改时间：</p><ul><li>使用 <code>length()</code> 方法获取文件大小（字节数）。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> file.length();</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 <code>lastModified()</code> 方法获取文件的最后修改时间戳。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">lastModifiedTime</span> <span class="operator">=</span> file.lastModified();</span><br></pre></td></tr></tbody></table></figure></li><li><p>列出目录中的文件和子目录：</p><ul><li>使用 <code>list()</code> 方法获取目录中的所有文件和子目录的名称。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] contents = directory.list();</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 <code>listFiles()</code> 方法获取目录中的所有文件和子目录的 <code>File</code> 对象。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File[] files = directory.listFiles();</span><br></pre></td></tr></tbody></table></figure></li><li><p>重命名文件或目录：</p><ul><li>使用 <code>renameTo()</code> 方法重命名文件或目录。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"/path/to/new_name.txt"</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">renamed</span> <span class="operator">=</span> file.renameTo(newFile);</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="8-2-文件流"><a href="#8-2-文件流" class="headerlink" title="8.2 文件流"></a>8.2 文件流</h2><p>文件输入流（FileInputStream）：</p><ol><li><p>导入必要的输入输出流类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建 <code>FileInputStream</code> 对象并打开文件：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"path/to/your/file.txt"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>读取文件内容：</p><ul><li>使用 <code>read()</code> 方法逐个字节读取文件内容。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="keyword">while</span> ((data = fileInputStream.read()) != -<span class="number">1</span>) {</span><br><span class="line">    <span class="comment">// 处理读取到的字节数据，可以将其转换成字符或做其他处理</span></span><br><span class="line">    <span class="type">char</span> <span class="variable">character</span> <span class="operator">=</span> (<span class="type">char</span>) data;</span><br><span class="line">    System.out.print(character);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>关闭文件输入流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileInputStream.close();</span><br></pre></td></tr></tbody></table></figure></li></ol><p>文件输出流（FileOutputStream）：</p><ol><li><p>导入必要的输入输出流类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建 <code>FileOutputStream</code> 对象并打开文件：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"path/to/your/output/file.txt"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>写入数据到文件：</p><ul><li>使用 <code>write()</code> 方法写入字节数组到文件。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">"Hello, world!"</span>;</span><br><span class="line"><span class="type">byte</span>[] bytes = text.getBytes();</span><br><span class="line">fileOutputStream.write(bytes);</span><br></pre></td></tr></tbody></table></figure></li><li><p>关闭文件输出流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileOutputStream.close();</span><br></pre></td></tr></tbody></table></figure></li></ol><p>3.<code>BufferedReader</code> 是 Java 中的一个字符缓冲输入流类，它用于高效读取文本文件的内容。它通常与其他字符输入流一起使用，如 <code>FileReader</code> 或 <code>InputStreamReader</code>，以提高读取性能和效率。</p><p><code>BufferedReader</code> 具有以下主要特点和功能：</p><ol><li>缓冲机制：<code>BufferedReader</code> 在内部维护一个缓冲区，可以一次性读取多个字符，然后逐个提供给程序。这减少了频繁的磁盘或网络访问，从而提高了读取效率。</li><li>逐行读取：<code>BufferedReader</code> 提供了 <code>readLine()</code> 方法，允许你逐行读取文本文件的内容，这在处理文本文件时非常常见。</li><li>自动字符编码：<code>BufferedReader</code> 默认会根据系统的字符编码自动处理字符解码，这意味着它可以正确处理不同字符编码的文本文件。</li><li>提供字符数组读取：除了逐行读取外，你还可以使用 <code>read(char[] cbuf, int off, int len)</code> 方法来读取指定数量的字符到字符数组中。</li><li>支持跳过字符：它还提供了 <code>skip(long n)</code> 方法，允许你跳过指定数量的字符。</li></ol><p>以下是创建和使用 <code>BufferedReader</code> 的基本示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReaderExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"path/to/your/textfile.txt"</span>);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader);</span><br><span class="line">            </span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) {</span><br><span class="line">                <span class="comment">// 处理每一行文本数据</span></span><br><span class="line">                System.out.println(line);</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            bufferedReader.close();</span><br><span class="line">            fileReader.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，我们使用了 <code>BufferedReader</code> 来逐行读取文本文件的内容，并确保在使用完毕后关闭流以释放资源。</p><h2 id="8-3-RandomAccessFile"><a href="#8-3-RandomAccessFile" class="headerlink" title="8. 3 RandomAccessFile"></a>8. 3 RandomAccessFile</h2><p><code>RandomAccessFile</code> 是 Java 中用于随机访问文件的类，它允许你在文件中定位特定的位置并读取或写入数据。你可以使用 <code>RandomAccessFile</code> 执行以下操作：</p><ol><li>打开文件：使用 <code>RandomAccessFile</code> 的构造函数来打开文件，并指定文件名和打开模式（只读、读写等）。</li><li>定位文件指针：使用 <code>seek()</code> 方法来定位文件中的指针位置，以便读取或写入数据。</li><li>读取数据：使用 <code>read()</code> 方法来从文件中读取数据。</li><li>写入数据：使用 <code>write()</code> 方法来向文件中写入数据。</li><li>关闭文件：在完成操作后，使用 <code>close()</code> 方法关闭文件。</li></ol><p>以下是一个示例，演示如何使用 <code>RandomAccessFile</code> 来读取和写入文件：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomAccessFileExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 打开文件，使用 "rw" 表示读写模式</span></span><br><span class="line">            <span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">"path/to/your/file.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定位文件指针到特定位置</span></span><br><span class="line">            file.seek(<span class="number">10</span>); <span class="comment">// 将文件指针定位到第11个字节的位置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> file.read(data); <span class="comment">// 从当前文件指针位置读取20个字节的数据</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, bytesRead)); <span class="comment">// 将读取的数据转换为字符串并输出</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入数据</span></span><br><span class="line">            file.seek(<span class="number">30</span>); <span class="comment">// 将文件指针定位到第31个字节的位置</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">newData</span> <span class="operator">=</span> <span class="string">"New data to write."</span>;</span><br><span class="line">            file.write(newData.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭文件</span></span><br><span class="line">            file.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，我们使用 <code>RandomAccessFile</code> 打开文件，定位文件指针，读取数据，写入数据，然后关闭文件。请注意，在实际应用中，你需要处理可能抛出的 <code>IOException</code> 异常，并确保在不再需要访问文件时关闭文件，以释放资源。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] data_arr = {<span class="number">12</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">1</span>, <span class="number">5</span>};</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 打开一个名为 "temp.txt" 的文件，以读写模式打开</span></span><br><span class="line">            <span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">"temp.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环遍历整数数组并将每个整数写入文件</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data_arr.length; i++){</span><br><span class="line">                randomAccessFile.writeInt(data_arr[i]);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从文件中逆序读取整数并打印它们</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> data_arr.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--){</span><br><span class="line">                <span class="comment">// 定位文件指针到正确的位置，每个整数占用 4 个字节</span></span><br><span class="line">                randomAccessFile.seek(i * <span class="number">4L</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 读取整数并打印</span></span><br><span class="line">                System.out.println(randomAccessFile.readInt());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭文件</span></span><br><span class="line">            randomAccessFile.close();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="8-4-Files工具类"><a href="#8-4-Files工具类" class="headerlink" title="8.4 Files工具类"></a>8.4 Files工具类</h2><p>以下是一些常见的 <code>Files</code> 工具类的用法：</p><ol><li><p>复制文件或目录：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">"source.txt"</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">"target.txt"</span>);</span><br><span class="line">Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></tbody></table></figure></li><li><p>移动文件或目录：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">source</span> <span class="operator">=</span> Paths.get(<span class="string">"source.txt"</span>);</span><br><span class="line"><span class="type">Path</span> <span class="variable">target</span> <span class="operator">=</span> Paths.get(<span class="string">"new_directory/target.txt"</span>);</span><br><span class="line">Files.move(source, target, StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除文件或目录：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">"file_or_directory_to_delete.txt"</span>);</span><br><span class="line">Files.delete(path);</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建文件：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> Paths.get(<span class="string">"new_file.txt"</span>);</span><br><span class="line">Files.createFile(file);</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建目录：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">directory</span> <span class="operator">=</span> Paths.get(<span class="string">"new_directory"</span>);</span><br><span class="line">Files.createDirectory(directory);</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建多层次目录：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">directories</span> <span class="operator">=</span> Paths.get(<span class="string">"parent_directory/child_directory"</span>);</span><br><span class="line">Files.createDirectories(directories);</span><br></pre></td></tr></tbody></table></figure></li><li><p>读取文件内容：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> Paths.get(<span class="string">"file.txt"</span>);</span><br><span class="line">List&lt;String&gt; lines = Files.readAllLines(file, StandardCharsets.UTF_8);</span><br></pre></td></tr></tbody></table></figure></li><li><p>写入文件内容：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> Paths.get(<span class="string">"file.txt"</span>);</span><br><span class="line">List&lt;String&gt; lines = Arrays.asList(<span class="string">"Line 1"</span>, <span class="string">"Line 2"</span>, <span class="string">"Line 3"</span>);</span><br><span class="line">Files.write(file, lines, StandardCharsets.UTF_8);</span><br></pre></td></tr></tbody></table></figure></li><li><p>检查文件或目录是否存在：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">"file_or_directory.txt"</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> Files.exists(path);</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取文件属性：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> Paths.get(<span class="string">"file.txt"</span>);</span><br><span class="line"><span class="type">BasicFileAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> Files.readAttributes(file, BasicFileAttributes.class);</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="8-5-file"><a href="#8-5-file" class="headerlink" title="8.5 file"></a>8.5 file</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//被拷贝的文件一定要存在 否则会抛出异常  这里的1.txt一定要存在</span></span><br><span class="line">            Files.copy(Paths.get(<span class="string">"/home/project/1.txt"</span>), Paths.get(<span class="string">"/home/project/2.txt"</span>), StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoveDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//将1.txt 重命名为3.txt 如果只需要移动到不同的目录，文件名不变即可</span></span><br><span class="line">            Files.move(Paths.get(<span class="string">"/home/project/1.txt"</span>), Paths.get(<span class="string">"/home/project/3.txt"</span>), StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">        <span class="comment">//将2.txt 重命名为4.txt 如果只需要移动到不同的目录，文件名不变即可</span></span><br><span class="line">        Files.move(Paths.get(<span class="string">"/home/project/2.txt"</span>), Paths.get(<span class="string">"/home/project/4.txt"</span>), StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//删除文件，文件必须存在，否则抛出异常</span></span><br><span class="line">            Files.delete(Paths.get(<span class="string">"/home/project/3.txt"</span>));</span><br><span class="line">            <span class="comment">//删除文件，返回是否删除成功 即使文件不存在，也不会保存，直接返回false</span></span><br><span class="line">            System.out.println(Files.deleteIfExists(Paths.get(<span class="string">"/home/project/3.txt"</span>)));</span><br><span class="line">            <span class="comment">//或者使用File类的delete方法</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"/home/project/4.txt"</span>);</span><br><span class="line">            System.out.println(file.delete());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInfo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"/home/project"</span>);</span><br><span class="line">        System.out.println(<span class="string">"文件或者目录名："</span> + file.getName());</span><br><span class="line">        System.out.println(<span class="string">"绝对路径："</span> + file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"父目录："</span> + file.getParent());</span><br><span class="line">        System.out.println(<span class="string">"文件路径："</span> + file.getPath());</span><br><span class="line">        <span class="comment">//判断文件是否是目录</span></span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) {</span><br><span class="line">            <span class="comment">//打印目录中的文件</span></span><br><span class="line">            Arrays.stream(file.list()).forEach(System.out::println);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"是否隐藏："</span> + file.isHidden());</span><br><span class="line">        System.out.println(<span class="string">"是否存在："</span> + file.exists());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadDir</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 调用readDir方法，传入指定目录的File对象</span></span><br><span class="line">        readDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"/home"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归地读取目录和文件，并输出它们的类型和名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 要处理的File对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readDir</span><span class="params">(File file)</span> {</span><br><span class="line">        <span class="comment">// 如果传入的File对象为null，则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果File对象表示一个目录</span></span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) {</span><br><span class="line">            <span class="comment">// 输出目录的信息（名称）</span></span><br><span class="line">            System.out.println(<span class="string">"目录"</span> + file.getName());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取目录下的所有文件和子目录</span></span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 遍历每一个文件或子目录并递归调用readDir方法</span></span><br><span class="line">            <span class="keyword">for</span> (File file2 : files) {</span><br><span class="line">                readDir(file2);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 如果File对象表示一个文件，输出文件的信息（名称）</span></span><br><span class="line">            System.out.println(<span class="string">"文件"</span> + file.getName());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="8-6-分类"><a href="#8-6-分类" class="headerlink" title="8.6 分类"></a>8.6 分类</h2><p>IO流分为字节流和字符流的分类是基于处理数据的单位和性质来划分的。</p><ol><li><strong>字节流 (Byte Stream)</strong>:<ul><li><strong>处理单位</strong>: 以字节（8位）为单位进行数据处理，适用于处理二进制数据或者文本文件。</li><li><strong>性质</strong>: 字节流是原始的、底层的输入输出，直接操作字节数据。</li><li><strong>InputStream和OutputStream</strong>: 主要使用<code>InputStream</code>和<code>OutputStream</code>类及其子类来实现字节流。例如，<code>FileInputStream</code>用于从文件读取字节，<code>FileOutputStream</code>用于写入字节到文件。</li></ul></li><li><strong>字符流 (Character Stream)</strong>:<ul><li><strong>处理单位</strong>: 以字符为单位进行数据处理，适用于处理文本数据。</li><li><strong>性质</strong>: 字符流是高级的，能够按照字符编码方式处理数据，适合文本数据处理。</li><li><strong>Reader和Writer</strong>: 主要使用<code>Reader</code>和<code>Writer</code>类及其子类来实现字符流。例如，<code>FileReader</code>用于从文件读取字符，<code>FileWriter</code>用于写入字符到文件。</li></ul></li></ol><p>字符流的存在是为了解决字节流在处理文本数据时可能会遇到字符编码的问题。字符流能够根据指定的字符编码（如UTF-8、ASCII等）将字符转换为字节，并且能够以字符为单位更好地处理文本数据，避免乱码等问题。</p><blockquote><p><img src="C:\Users\7878\AppData\Roaming\Typora\typora-user-images\image-20231009190751075.png" alt="image-20231009190751075"></p></blockquote><h2 id="8-7-缓冲流"><a href="#8-7-缓冲流" class="headerlink" title="8.7 缓冲流"></a>8.7 缓冲流</h2><p>在Java中，缓冲流用于提高读取和写入性能，通过将数据缓存到内存中来减少与磁盘或网络的交互次数。主要有<code>BufferedReader</code>和<code>BufferedWriter</code>用于字符流的缓冲，以及<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>用于字节流的缓冲。以下是如何使用Java缓冲流的基本步骤：</p><ol><li><p><strong>导入必要的类</strong>： 首先，确保导入Java IO包中的相关类。根据您的需求，您需要导入以下类之一：</p><ul><li><p>对于字符流的缓冲：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br></pre></td></tr></tbody></table></figure></li><li><p>对于字节流的缓冲：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong>创建底层流</strong>： 首先，创建底层的输入流（如<code>FileInputStream</code>或<code>FileReader</code>）或输出流（如<code>FileOutputStream</code>或<code>FileWriter</code>），这些流将连接到缓冲流。</p></li><li><p><strong>创建缓冲流</strong>： 使用底层流来创建缓冲流。例如，对于字符输入流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"文件路径"</span>));</span><br></pre></td></tr></tbody></table></figure><p>对于字符输出流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">"文件路径"</span>));</span><br></pre></td></tr></tbody></table></figure><p>对于字节输入流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"文件路径"</span>));</span><br></pre></td></tr></tbody></table></figure><p>对于字节输出流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"文件路径"</span>));</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>使用缓冲流</strong>： 现在，您可以使用缓冲流来读取或写入数据，它们提供了一些方便的方法。例如，使用<code>readLine()</code>来逐行读取文本文件，或使用<code>write()</code>来写入数据。</p><p>示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) {</span><br><span class="line">    <span class="comment">// 处理读取的行数据</span></span><br><span class="line">    bufferedWriter.write(line);</span><br><span class="line">    bufferedWriter.newLine(); <span class="comment">// 写入换行符</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>关闭流</strong>： 使用完缓冲流后，务必关闭它们以释放资源。可以使用<code>close()</code>方法来关闭流，它也会自动关闭底层的基本流。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bufferedReader.close();</span><br><span class="line">bufferedWriter.close();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>刷新流</strong>（可选）： 如果您在写入数据后需要立即将数据刷新到磁盘或网络，请调用<code>flush()</code>方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bufferedWriter.flush();</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="8-8-ObjectStream"><a href="#8-8-ObjectStream" class="headerlink" title="8.8 ObjectStream"></a>8.8 ObjectStream</h2><p><code>ObjectInputStream</code> 和 <code>ObjectOutputStream</code> 是 Java 中用于序列化和反序列化对象的类。它们可以将对象转换为字节流以便于存储和传输，并在需要时将字节流还原为对象。以下是如何使用这两个类的基本示例：</p><p><strong>对象的序列化（写入）：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectSerialization</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"object.ser"</span>);</span><br><span class="line">             <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream)) {</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个对象</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"Alice"</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将对象序列化并写入文件</span></span><br><span class="line">            objectOutputStream.writeObject(person);</span><br><span class="line">            System.out.println(<span class="string">"对象已成功序列化"</span>);</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>对象的反序列化（读取）：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectDeserialization</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"object.ser"</span>);</span><br><span class="line">             <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream)) {</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从文件中读取序列化的对象</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) objectInputStream.readObject();</span><br><span class="line">            System.out.println(<span class="string">"对象已成功反序列化"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Name: "</span> + person.getName());</span><br><span class="line">            System.out.println(<span class="string">"Age: "</span> + person.getAge());</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (IOException | ClassNotFoundException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述示例中，<code>Person</code> 类是一个简单的自定义类，用于演示对象的序列化和反序列化。在实际应用中，您可以替换成您需要序列化的自定义对象。</p><p>要成功序列化对象，确保被序列化的对象及其成员都是可序列化的。为此，您可以实现 <code>Serializable</code> 接口，并在需要的情况下自定义 <code>serialVersionUID</code> 字段以控制版本兼容性。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String id;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String id)</span>{</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"User ="</span> + name + <span class="string">"\nid = "</span> + id + <span class="string">"\n"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h1 id="9-网络"><a href="#9-网络" class="headerlink" title="9 网络"></a>9 网络</h1><h2 id="9-1-HttpURLConnection"><a href="#9-1-HttpURLConnection" class="headerlink" title="9.1 HttpURLConnection"></a>9.1 HttpURLConnection</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 创建一个URL对象，指定要发送HTTP GET请求的目标地址</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">"https://example.com"</span>);</span><br><span class="line">            <span class="comment">// 打开HTTP连接</span></span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置HTTP请求方法为GET</span></span><br><span class="line">            connection.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取HTTP响应码</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">responseCode</span> <span class="operator">=</span> connection.getResponseCode();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (responseCode == HttpURLConnection.HTTP_OK) {</span><br><span class="line">                <span class="comment">// 如果响应码为200，表示请求成功</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 创建一个BufferedReader对象来读取响应内容</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">                String inputLine;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 逐行读取响应内容并存储在StringBuilder中</span></span><br><span class="line">                <span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="literal">null</span>) {</span><br><span class="line">                    content.append(inputLine);</span><br><span class="line">                }</span><br><span class="line">                in.close();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 打印响应内容</span></span><br><span class="line">                System.out.println(content.toString());</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 如果响应码不为200，打印HTTP请求失败信息</span></span><br><span class="line">                System.out.println(<span class="string">"HTTP request failed with response code: "</span> + responseCode);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="comment">// 捕获并打印任何异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="9-2-InetAddress"><a href="#9-2-InetAddress" class="headerlink" title="9.2 InetAddress"></a>9.2 InetAddress</h2><p><code>InetAddress</code> 是 Java 中用于表示 IP 地址的类。它提供了一种在网络应用程序中操作 IP 地址的方式。你可以使用 <code>InetAddress</code> 来获取主机名和 IP 地址之间的映射，以及执行网络通信时需要的地址解析。</p><p>以下是一些常见的 <code>InetAddress</code> 类的用法示例：</p><p><strong>获取本地主机的 InetAddress 对象</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">System.out.println(<span class="string">"本地主机的主机名："</span> + localHost.getHostName());</span><br><span class="line">System.out.println(<span class="string">"本地主机的IP地址："</span> + localHost.getHostAddress());</span><br></pre></td></tr></tbody></table></figure><p><strong>通过主机名获取 InetAddress 对象</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">"www.example.com"</span>;</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(hostname);</span><br><span class="line">System.out.println(<span class="string">"主机名："</span> + address.getHostName());</span><br><span class="line">System.out.println(<span class="string">"IP地址："</span> + address.getHostAddress());</span><br></pre></td></tr></tbody></table></figure><p><strong>获取主机的所有 IP 地址</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">"www.example.com"</span>;</span><br><span class="line">InetAddress[] addresses = InetAddress.getAllByName(hostname);</span><br><span class="line"><span class="keyword">for</span> (InetAddress addr : addresses) {</span><br><span class="line">    System.out.println(<span class="string">"主机名："</span> + addr.getHostName());</span><br><span class="line">    System.out.println(<span class="string">"IP地址："</span> + addr.getHostAddress());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>检查主机是否可达</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">"www.example.com"</span>;</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(hostname);</span><br><span class="line"><span class="keyword">if</span> (address.isReachable(<span class="number">5000</span>)) {</span><br><span class="line">    System.out.println(<span class="string">"主机可达"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    System.out.println(<span class="string">"主机不可达"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="9-3-Socket"><a href="#9-3-Socket" class="headerlink" title="9.3 Socket"></a>9.3 Socket</h2><p>使用 Java 中的 <code>Socket</code> 进行网络编程涉及以下步骤：</p><ol><li><p><strong>创建客户端套接字</strong>：如果你要编写客户端应用程序，首先需要创建一个 <code>Socket</code> 对象，以便连接到远程服务器。使用以下代码创建客户端套接字：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">serverHost</span> <span class="operator">=</span> <span class="string">"example.com"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(serverHost, serverPort);</span><br><span class="line">    <span class="comment">// 现在你可以使用 socket 进行数据发送和接收</span></span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>创建服务器套接字</strong>：如果你要编写服务器应用程序，首先需要创建一个 <code>ServerSocket</code> 对象，以便侦听客户端的连接请求。使用以下代码创建服务器套接字：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(serverPort);</span><br><span class="line">    <span class="comment">// 服务器套接字现在正在侦听客户端的连接请求</span></span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>与套接字进行数据通信</strong>：一旦套接字建立连接，你可以使用 <code>InputStream</code> 和 <code>OutputStream</code> 来在客户端和服务器之间进行数据传输。例如，客户端可以使用 <code>socket.getOutputStream()</code> 发送数据，服务器可以使用 <code>socket.getInputStream()</code> 接收数据。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端发送数据示例</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(outputStream);</span><br><span class="line">writer.println(<span class="string">"Hello, Server!"</span>);</span><br><span class="line">writer.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器接收数据示例</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line"><span class="type">String</span> <span class="variable">clientMessage</span> <span class="operator">=</span> reader.readLine();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>关闭套接字</strong>：在通信完成后，务必关闭套接字以释放资源。通常在 <code>try-catch-finally</code> 块中进行套接字关闭操作。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 关闭套接字</span></span><br><span class="line">    socket.close();</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="9-4-ServerSocket"><a href="#9-4-ServerSocket" class="headerlink" title="9.4 ServerSocket"></a>9.4 ServerSocket</h2><p>在 Java 中，<code>ServerSocket</code> 类用于创建服务器套接字，以侦听客户端的连接请求。一旦建立连接，就可以创建与客户端的通信套接字，允许数据交换。以下是使用 <code>ServerSocket</code> 的基本步骤：</p><ol><li><p><strong>创建 ServerSocket 实例</strong>：首先，实例化 <code>ServerSocket</code> 并指定服务器将侦听的端口号。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(serverPort);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>等待客户端连接</strong>：使用 <code>accept()</code> 方法等待客户端连接请求。此方法会阻塞，直到有客户端连接到服务器。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> serverSocket.accept();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>与客户端进行通信</strong>：一旦客户端连接成功，就可以使用 <code>InputStream</code> 和 <code>OutputStream</code> 与客户端进行数据交换。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> clientSocket.getInputStream();</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> clientSocket.getOutputStream();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>接收和发送数据</strong>：使用 <code>InputStream</code> 从客户端接收数据，并使用 <code>OutputStream</code> 向客户端发送数据。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从客户端接收数据</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line"><span class="type">String</span> <span class="variable">clientMessage</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向客户端发送数据</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(outputStream);</span><br><span class="line">writer.println(<span class="string">"Hello, Client!"</span>);</span><br><span class="line">writer.flush();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>关闭连接</strong>：在通信完成后，关闭客户端套接字和服务器套接字。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clientSocket.close();</span><br><span class="line">serverSocket.close();</span><br></pre></td></tr></tbody></table></figure></li></ol><p>完整示例代码如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerExample</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">serverPort</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(serverPort);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Server listening on port "</span> + serverPort);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待客户端连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">"Client connected: "</span> + clientSocket.getInetAddress());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取输入流和输出流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> clientSocket.getInputStream();</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> clientSocket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从客户端接收数据</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">            <span class="type">String</span> <span class="variable">clientMessage</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            System.out.println(<span class="string">"Received from client: "</span> + clientMessage);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向客户端发送数据</span></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(outputStream);</span><br><span class="line">            writer.println(<span class="string">"Hello, Client!"</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭套接字</span></span><br><span class="line">            clientSocket.close();</span><br><span class="line">            serverSocket.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>服务端和客户端信息发送</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EchoServer</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 创建服务器套接字并指定端口号 1080</span></span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">1080</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待客户端连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">client</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建用于向客户端发送数据的 PrintWriter</span></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(client.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建用于从客户端接收数据的 BufferedReader</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(client.getInputStream()));</span><br><span class="line"></span><br><span class="line">            String userIn;</span><br><span class="line">            <span class="comment">// 循环读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">while</span> ((userIn = in.readLine()) != <span class="literal">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"收到客户端消息："</span> + userIn);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 发回客户端相同的消息</span></span><br><span class="line">                out.println(userIn);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭套接字</span></span><br><span class="line">            client.close();</span><br><span class="line">            serverSocket.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EchoClient</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 服务器主机名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">"127.0.0.1"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务器端口</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1080</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于从用户获取输入的 Scanner 对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">userIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 建立与服务器的 socket 连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(hostname, port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 socket 输出流，用于向服务器发送数据</span></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(socket.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 socket 输入流，用于接收服务器返回的数据</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">            String userInput;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"请输入信息："</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当用户输入 "exit" 时退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (!<span class="string">"exit"</span>.equals(userInput = userIn.nextLine())) {</span><br><span class="line">                <span class="comment">// 将用户输入发送到服务器</span></span><br><span class="line">                out.println(userInput);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 从服务器接收并打印回应</span></span><br><span class="line">                System.out.println(<span class="string">"收到服务端回应:"</span> + in.readLine());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭 socket 连接</span></span><br><span class="line">            socket.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="10-多线程"><a href="#10-多线程" class="headerlink" title="10 多线程"></a>10 多线程</h1><h2 id="10-1-实现"><a href="#10-1-实现" class="headerlink" title="10.1 实现"></a>10.1 实现</h2><ol><li><strong>继承Thread类</strong>（<code>Thread1</code>类）：<ul><li>当一个类继承自<code>Thread</code>类时，它成为一个线程类，可以直接通过创建该类的对象并调用<code>start()</code>方法来启动线程。这是一种较为简单的方式，但有一个缺点，即Java不支持多重继承，因此如果一个类已经继承了其他类，就不能再继承<code>Thread</code>类。</li></ul></li><li><strong>实现Runnable接口</strong>（<code>Thread2</code>类）：<ul><li>如果一个类已经有了一个父类或者你想要更好地分离线程的行为和类本身的行为，那么你可以选择实现<code>Runnable</code>接口。这允许你将线程的任务独立出来，以实现更灵活的多线程编程。你需要创建一个实现<code>Runnable</code>接口的类，然后将该类的实例传递给一个<code>Thread</code>对象来启动线程。这种方式避免了单一继承的限制。</li></ul></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThread</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Thread1</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread1</span>();</span><br><span class="line">        <span class="comment">//声明一个Thread1对象，这个Thread1类继承自Thread类的</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Thread2</span>());</span><br><span class="line">        <span class="comment">//传递一个匿名对象作为参数</span></span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//在run()方法中放入线程要完成的工作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里我们把两个线程各自的工作设置为打印100次信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) {</span><br><span class="line">            System.out.println(<span class="string">"Hello! This is "</span> + i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在这个循环结束后，线程便会自动结束</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">    <span class="comment">//与Thread1不同，如果当一个线程已经继承了另一个类时，就建议你通过实现Runnable接口来构造</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) {</span><br><span class="line">            System.out.println(<span class="string">"Thanks. There is "</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="10-2-线程变量"><a href="#10-2-线程变量" class="headerlink" title="10.2 线程变量"></a>10.2 线程变量</h2><p>线程变量（Thread-local variables）是一种在多线程编程中用于在不同线程之间存储独立数据的机制。每个线程都有自己独立的变量副本，而不会相互干扰。这对于需要在线程间隔离数据的场景非常有用。</p><p>在Java中，你可以使用<code>ThreadLocal</code>类来创建线程变量。以下是使用<code>ThreadLocal</code>的基本步骤以及如何使用线程变量：</p><ol><li><p><strong>创建 ThreadLocal 对象</strong>： 首先，你需要创建一个<code>ThreadLocal</code>对象，用于存储线程本地变量。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; threadLocalVariable = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>设置线程变量的值</strong>： 使用<code>ThreadLocal</code>对象的<code>set()</code>方法可以设置当前线程的变量值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadLocalVariable.set(<span class="string">"This is thread-local data."</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>获取线程变量的值</strong>： 使用<code>ThreadLocal</code>对象的<code>get()</code>方法可以获取当前线程的变量值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> threadLocalVariable.get();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>移除线程变量的值</strong>（可选）： 你也可以使用<code>ThreadLocal</code>对象的<code>remove()</code>方法来移除当前线程的变量值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadLocalVariable.remove();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>示例代码</strong>： 下面是一个示例，演示如何在多线程环境中使用<code>ThreadLocal</code>来存储线程本地数据：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalExample</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; threadLocalVariable = ThreadLocal.withInitial(() -&gt; <span class="string">"Default Value"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 设置线程1的变量值</span></span><br><span class="line">        threadLocalVariable.set(<span class="string">"Thread 1 Data"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程2并获取其变量值</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> threadLocalVariable.get();</span><br><span class="line">            System.out.println(<span class="string">"Thread 2 Data: "</span> + data);</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>在这个示例中，线程1设置了线程变量的值，然后线程2在不影响线程1的情况下获取了自己的线程变量值。这样，每个线程都有自己独立的线程变量，互不干扰。线程变量通常用于保存线程特定的上下文信息或状态。</p><h2 id="10-3-线程同步"><a href="#10-3-线程同步" class="headerlink" title="10.3 线程同步"></a>10.3 线程同步</h2><p>线程同步是一种用于控制多个线程在共享资源上的访问以防止竞争条件和数据不一致性的机制。在Java中，你可以使用以下方式来实现线程同步：</p><p><strong>使用synchronized关键字</strong>：</p><ul><li>在方法上使用<code>synchronized</code>关键字，或者在代码块内使用<code>synchronized</code>关键字，可以确保只有一个线程可以访问被标记为<code>synchronized</code>的方法或代码块。这种方式常用于同步对象的访问。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">synchronizedMethod</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// 同步的方法内容</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (lockObject) {</span><br><span class="line">    <span class="comment">// 同步的代码块</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedExample</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> {</span><br><span class="line">        counter++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getCounter</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">SynchronizedExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedExample</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建多个线程并启动它们</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">                example.increment();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">                example.increment();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 等待两个线程执行完毕</span></span><br><span class="line">            thread1.join();</span><br><span class="line">            thread2.join();</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出最终计数器的值</span></span><br><span class="line">        System.out.println(<span class="string">"Final Counter Value: "</span> + example.getCounter());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>使用ReentrantLock</strong>：</p><ul><li><code>java.util.concurrent.locks.ReentrantLock</code>是一个更灵活的同步机制，可以用于替代<code>synchronized</code>关键字。它提供了更多的控制选项，如尝试获取锁、设置锁超时等。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">synchronizedMethod</span><span class="params">()</span> {</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 同步的方法内容</span></span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        lock.unlock();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantLockExample</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(); <span class="comment">// 创建一个ReentrantLock对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> {</span><br><span class="line">        lock.lock(); <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            counter++;</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCounter</span><span class="params">()</span> {</span><br><span class="line">        lock.lock(); <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> counter;</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ReentrantLockExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLockExample</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建多个线程并启动它们</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">                example.increment();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">                example.increment();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 等待两个线程执行完毕</span></span><br><span class="line">            thread1.join();</span><br><span class="line">            thread2.join();</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出最终计数器的值</span></span><br><span class="line">        System.out.println(<span class="string">"Final Counter Value: "</span> + example.getCounter());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在多线程编程中，<code>thread.join()</code> 是一个用于等待线程完成的方法。当一个线程调用另一个线程的 <code>join()</code> 方法时，它会被阻塞，直到被调用的线程执行完毕。这意味着程序会等待被调用的线程完成它的任务，然后再继续执行接下来的代码。</p><p>通常情况下，<code>thread.join()</code> 用于确保主线程等待所有其他线程完成之后再继续执行，这对于需要协调多个线程之间的操作非常有用。例如，如果你有一个主线程和多个工作线程，你可以使用 <code>join()</code> 来等待所有工作线程完成它们的任务，然后再进行结果的汇总或其他操作。</p><p>在Java中，<code>Condition</code> 是在多线程编程中用于控制线程之间协作和同步的一种机制。<code>Condition</code> 通常与 <code>ReentrantLock</code> 结合使用，以替代传统的 <code>synchronized</code> 块来实现更灵活的线程同步。</p><p><code>Condition</code> 提供了类似于 <code>wait()</code> 和 <code>notify()</code> 方法的功能，但比它们更灵活。下面是一些关于 <code>Condition</code> 的基本用法：</p><ol><li><p>创建 <code>Condition</code>： 通常，你需要与一个 <code>ReentrantLock</code> 关联来创建一个 <code>Condition</code>。这可以通过调用 <code>ReentrantLock</code> 的 <code>newCondition()</code> 方法来实现。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br></pre></td></tr></tbody></table></figure></li><li><p>等待条件： 你可以使用 <code>await()</code> 方法来让线程等待某个条件变为真。线程将被阻塞，直到其他线程调用 <code>signal()</code> 或 <code>signalAll()</code> 来通知等待的线程条件已满足。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">while</span> (conditionNotMet) {</span><br><span class="line">        condition.await();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 执行条件已满足时的操作</span></span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line">    lock.unlock();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>通知条件： 当某个条件发生变化时，可以使用 <code>signal()</code> 或 <code>signalAll()</code> 方法来通知等待的线程。<code>signal()</code> 通知一个等待线程，而 <code>signalAll()</code> 通知所有等待线程。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 更新条件</span></span><br><span class="line">    conditionNotMet = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 通知等待的线程条件已满足</span></span><br><span class="line">    condition.signal();</span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line">    lock.unlock();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p><code>Condition</code> 的使用允许更细粒度的线程同步，因为你可以选择哪个条件需要等待或被通知，而不是像传统的 <code>wait()</code> 和 <code>notify()</code> 那样只能等待或通知一个条件。这使得线程的管理和同步更加灵活和精确。</p><p>需要注意的是，<code>Condition</code> 通常与 <code>ReentrantLock</code> 配合使用，而不是与传统的 <code>synchronized</code> 关键字。这是因为 <code>Condition</code> 提供了更多的控制权和灵活性，适用于更复杂的多线程场景。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerConsumerExample</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">5</span>;  <span class="comment">// 缓冲区容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Integer&gt; buffer = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  <span class="comment">// 缓冲区队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();  <span class="comment">// 重入锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition();  <span class="comment">// 缓冲区不满的条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition();  <span class="comment">// 缓冲区不空的条件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者方法：往缓冲区中添加数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produce</span><span class="params">(<span class="type">int</span> item)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        lock.lock();  <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (buffer.size() == CAPACITY) {</span><br><span class="line">                System.out.println(<span class="string">"Buffer is full. Producer is waiting."</span>);</span><br><span class="line">                notFull.await();  <span class="comment">// 缓冲区已满，生产者等待</span></span><br><span class="line">            }</span><br><span class="line">            buffer.offer(item);</span><br><span class="line">            System.out.println(<span class="string">"Produced: "</span> + item);</span><br><span class="line">            notEmpty.signal();  <span class="comment">// 通知等待的消费者</span></span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock();  <span class="comment">// 释放锁</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者方法：从缓冲区中取出数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        lock.lock();  <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (buffer.isEmpty()) {</span><br><span class="line">                System.out.println(<span class="string">"Buffer is empty. Consumer is waiting."</span>);</span><br><span class="line">                notEmpty.await();  <span class="comment">// 缓冲区为空，消费者等待</span></span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> <span class="variable">item</span> <span class="operator">=</span> buffer.poll();</span><br><span class="line">            System.out.println(<span class="string">"Consumed: "</span> + item);</span><br><span class="line">            notFull.signal();  <span class="comment">// 通知等待的生产者</span></span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            lock.unlock();  <span class="comment">// 释放锁</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ProducerConsumerExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProducerConsumerExample</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建生产者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) {</span><br><span class="line">                    example.produce(i);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建消费者线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">item</span> <span class="operator">=</span> example.consume();</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        producerThread.start();  <span class="comment">// 启动生产者线程</span></span><br><span class="line">        consumerThread.start();  <span class="comment">// 启动消费者线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            producerThread.join();  <span class="comment">// 等待生产者线程结束</span></span><br><span class="line">            consumerThread.join();  <span class="comment">// 等待消费者线程结束</span></span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="10-4-死锁"><a href="#10-4-死锁" class="headerlink" title="10.4 死锁"></a>10.4 死锁</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadlockExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建两个资源</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">resource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">resource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程1尝试获取资源1，然后资源2</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">synchronized</span> (resource1) {</span><br><span class="line">                System.out.println(<span class="string">"Thread 1: Holding resource 1..."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>); <span class="comment">// 为了增加死锁发生的机会</span></span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"Thread 1: Waiting for resource 2..."</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource2) {</span><br><span class="line">                    System.out.println(<span class="string">"Thread 1: Acquired resource 2."</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程2尝试获取资源2，然后资源1</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">synchronized</span> (resource2) {</span><br><span class="line">                System.out.println(<span class="string">"Thread 2: Holding resource 2..."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>); <span class="comment">// 为了增加死锁发生的机会</span></span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"Thread 2: Waiting for resource 1..."</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource1) {</span><br><span class="line">                    System.out.println(<span class="string">"Thread 2: Acquired resource 1."</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动两个线程</span></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待两个线程完成</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            thread1.join();</span><br><span class="line">            thread2.join();</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Both threads have finished."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="10-5-ArrayBlockingQueue"><a href="#10-5-ArrayBlockingQueue" class="headerlink" title="10.5  ArrayBlockingQueue"></a>10.5  ArrayBlockingQueue</h2><p><code>ArrayBlockingQueue</code> 是 Java 标准库中的一个有界阻塞队列，用于多线程编程中的生产者-消费者问题或其他线程协作场景。它基于数组实现，具有固定的容量，并且当队列已满时，生产者将被阻塞，当队列为空时，消费者将被阻塞。这种队列的特性使得它适用于限制资源的共享。</p><p>以下是如何创建和使用 <code>ArrayBlockingQueue</code> 的基本示例：</p><p>导入 <code>java.util.concurrent</code> 包：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br></pre></td></tr></tbody></table></figure><p>创建 <code>ArrayBlockingQueue</code> 对象，并指定队列容量：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>); <span class="comment">// 创建容量为10的队列</span></span><br></pre></td></tr></tbody></table></figure><p>在生产者线程中往队列中添加元素，可以使用 <code>put()</code> 方法来添加，如果队列已满，它将等待：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    queue.put(<span class="number">1</span>); <span class="comment">// 将元素1放入队列</span></span><br><span class="line">} <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在消费者线程中从队列中取出元素，可以使用 <code>take()</code> 方法来取出，如果队列为空，它将等待：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">item</span> <span class="operator">=</span> queue.take(); <span class="comment">// 从队列中取出元素</span></span><br><span class="line">    <span class="comment">// 处理取出的元素</span></span><br><span class="line">} <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>你还可以使用 <code>offer()</code> 方法尝试往队列中添加元素，如果队列已满，它会立即返回 <code>false</code>，或者使用 <code>poll()</code> 方法尝试取出元素，如果队列为空，它会立即返回 <code>null</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">added</span> <span class="operator">=</span> queue.offer(<span class="number">2</span>); <span class="comment">// 尝试将元素2放入队列，如果队列已满返回false</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">item</span> <span class="operator">=</span> queue.poll(); <span class="comment">// 尝试从队列中取出元素，如果队列为空返回null</span></span><br></pre></td></tr></tbody></table></figure><p><code>ArrayBlockingQueue</code> 还提供了其他一些方法，如 <code>offer(E e, long timeout, TimeUnit unit)</code> 和 <code>poll(long timeout, TimeUnit unit)</code>，它们允许你在超时时间内尝试添加或取出元素。此外，你还可以使用 <code>remainingCapacity()</code> 方法来获取队列中剩余可用空间的数量。</p><h2 id="10-6-生产消费者"><a href="#10-6-生产消费者" class="headerlink" title="10.6 生产消费者"></a>10.6 生产消费者</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PCModel</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedBlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line">    String[] arr = {<span class="string">"生产一"</span>, <span class="string">"生产二"</span>, <span class="string">"消费一"</span>, <span class="string">"消费二"</span>};</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">PCModel</span> <span class="variable">pcModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PCModel</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Provider</span> <span class="variable">provider1</span> <span class="operator">=</span> pcModel.<span class="keyword">new</span> <span class="title class_">Provider</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadProvider1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(provider1);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer1</span> <span class="operator">=</span> pcModel.<span class="keyword">new</span> <span class="title class_">Consumer</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadConsumer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer1);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Provider</span> <span class="variable">provider2</span> <span class="operator">=</span> pcModel.<span class="keyword">new</span> <span class="title class_">Provider</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadProvider2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(provider2);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer2</span> <span class="operator">=</span> pcModel.<span class="keyword">new</span> <span class="title class_">Consumer</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadConsumer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(consumer2);</span><br><span class="line">        </span><br><span class="line">        provider1.setS1(<span class="string">"生产一"</span>);</span><br><span class="line">        consumer1.setS1(<span class="string">"消费一"</span>);</span><br><span class="line">        provider2.setS1(<span class="string">"生产二"</span>);</span><br><span class="line">        consumer2.setS1(<span class="string">"消费二"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        threadProvider1.start();</span><br><span class="line">        threadConsumer1.start();</span><br><span class="line">        threadProvider2.start();</span><br><span class="line">        threadConsumer2.start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Provider</span>  <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">        ThreadLocal&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> String s1;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setS</span><span class="params">(String str)</span> {</span><br><span class="line">            s.set(str);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setS1</span><span class="params">(String str)</span>{</span><br><span class="line">            <span class="built_in">this</span>.s1 = str;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) {</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>);</span><br><span class="line">                queue.add(integer);</span><br><span class="line">                System.out.println(s1 + <span class="string">"制做了"</span> + integer);</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">        ThreadLocal&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> String s2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setS</span><span class="params">(String str)</span> {</span><br><span class="line">            s.set(str);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setS1</span><span class="params">(String str)</span>{</span><br><span class="line">            <span class="built_in">this</span>.s2 = str;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) {</span><br><span class="line">                <span class="keyword">while</span>(queue.size() == <span class="number">0</span>) {</span><br><span class="line">                    System.out.println(s2 + <span class="string">"正在等待"</span>);</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                Integer integer;</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    integer = queue.take();</span><br><span class="line">                    System.out.println(s2 + <span class="string">"获取了"</span> + integer);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="10-7-线程池"><a href="#10-7-线程池" class="headerlink" title="10.7 线程池"></a>10.7 线程池</h2><p>线程池是一种用于管理和重用线程的机制，它可以帮助你更有效地管理多线程任务，减少线程的创建和销毁开销。Java 提供了 <code>java.util.concurrent</code> 包，其中包含了线程池的实现，使其在多线程应用程序中更容易使用。</p><p>下面是如何在Java中使用线程池的一般步骤：</p><ol><li>创建线程池：你可以使用 <code>ExecutorService</code> 接口的工厂方法来创建线程池，通常有以下几种类型：<ul><li><code>Executors.newFixedThreadPool(int nThreads)</code>: 创建一个具有固定线程数的线程池，线程数不会变化。</li><li><code>Executors.newCachedThreadPool()</code>: 创建一个具有可根据需要创建新线程的线程池，适用于短期异步任务。</li><li><code>Executors.newSingleThreadExecutor()</code>: 创建一个仅包含一个线程的线程池，用于按顺序执行任务。</li><li><code>Executors.newScheduledThreadPool(int corePoolSize)</code>: 创建一个固定大小的线程池，用于调度定时任务。</li></ul></li><li>提交任务：使用线程池的 <code>submit</code> 或 <code>execute</code> 方法提交需要执行的任务。</li><li>关闭线程池：当不再需要线程池时，应该调用线程池的 <code>shutdown</code> 或 <code>shutdownNow</code> 方法来关闭线程池。这将停止线程池中的所有线程并释放资源。</li></ol><p>以下是一个简单示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建一个固定大小为3的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务给线程池</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">task</span> <span class="operator">=</span> i;</span><br><span class="line">            threadPool.submit(() -&gt; {</span><br><span class="line">                System.out.println(<span class="string">"Task "</span> + task + <span class="string">" is executing by thread "</span> + Thread.currentThread().getId());</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们创建了一个固定大小为3的线程池，然后提交了5个任务。线程池会自动分配任务给可用的线程，执行完任务后关闭线程池。</p><p>使用线程池可以提高多线程应用程序的性能和可维护性，因为它可以避免频繁创建和销毁线程，以及管理线程的生命周期。</p><h1 id="11-JDBC"><a href="#11-JDBC" class="headerlink" title="11 JDBC"></a>11 JDBC</h1><h2 id="11-1-JDBC"><a href="#11-1-JDBC" class="headerlink" title="11.1 JDBC"></a>11.1 JDBC</h2><p>JDBC 是 Java Database Connectivity 的缩写，是 Java 编程语言用于与关系型数据库进行连接和交互的标准 API（应用程序接口）。JDBC 允许 Java 应用程序通过标准接口访问和操作数据库，而不依赖于特定数据库系统。</p><p>JDBC 提供了一组类和接口，使开发人员能够执行以下任务：</p><ol><li>建立数据库连接：通过 JDBC，你可以创建与数据库的连接，这通常涉及到提供数据库的连接 URL、用户名和密码。</li><li>执行 SQL 查询：你可以使用 JDBC 来执行 SQL 查询，包括 SELECT 查询用于检索数据和 INSERT、UPDATE、DELETE 查询用于修改数据。</li><li>处理结果集：JDBC 允许你从数据库中检索查询结果，并将结果封装为 Java 对象，以便在应用程序中处理。</li><li>处理事务：JDBC 支持事务处理，你可以使用它来控制多个 SQL 操作的原子性和一致性。</li><li>处理异常：JDBC 引发异常来处理各种数据库操作可能遇到的问题，开发人员可以捕获和处理这些异常以实现错误处理和故障恢复。</li></ol><p>JDBC 是一种非常强大和灵活的工具，它允许 Java 应用程序与各种关系型数据库（如Oracle、MySQL、SQL Server、PostgreSQL等）进行集成。使用 JDBC，开发人员可以编写数据库无关的代码，从而能够轻松切换和连接到不同的数据库系统，而不必修改应用程序的大部分代码。</p><p>JDBC 驱动程序是用于不同数据库系统的具体实现，它们充当 JDBC API 和数据库之间的桥梁，允许 Java 应用程序与特定数据库进行通信。常见的 JDBC 驱动程序包括MySQL Connector/J、Oracle JDBC 驱动程序等。开发人员需要根据使用的数据库系统选择合适的 JDBC 驱动程序来建立连接。</p><h2 id="11-2-连接"><a href="#11-2-连接" class="headerlink" title="11.2 连接"></a>11.2 连接</h2><p>使用Java中的JDBC（Java Database Connectivity）来连接和操作数据库通常需要以下步骤：</p><ol><li><p><strong>导入JDBC库</strong>：首先，你需要导入JDBC库，通常包括Java的<code>java.sql</code>包和特定数据库的JDBC驱动程序库。你可以通过在Java项目中添加JAR文件或使用Maven等构建工具来引入所需的JDBC库。</p></li><li><p><strong>加载数据库驱动程序</strong>：在你的Java应用程序中，使用<code>Class.forName()</code>方法来加载特定数据库的JDBC驱动程序。不同的数据库有不同的驱动程序类名。例如，对于MySQL数据库，你可以加载MySQL的JDBC驱动程序如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>建立数据库连接</strong>：使用<code>DriverManager.getConnection()</code>方法来建立与数据库的连接。你需要提供数据库的连接字符串、用户名和密码。连接字符串的格式会根据使用的数据库类型而有所不同。例如，连接到MySQL数据库可以如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">"jdbc:mysql://localhost:3306/your_database"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"your_username"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">"your_password"</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>创建和执行SQL语句</strong>：使用<code>Connection</code>对象来创建<code>Statement</code>、<code>PreparedStatement</code>或<code>CallableStatement</code>对象，然后使用它们来执行SQL查询或更新操作。例如，执行一个简单的查询：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(<span class="string">"SELECT * FROM your_table"</span>);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) {</span><br><span class="line">    <span class="comment">// 处理查询结果</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>处理结果</strong>：如果你执行的是查询操作，你可以使用<code>ResultSet</code>对象来获取查询结果。如果执行的是更新操作，你可以检查受影响的行数。</p></li><li><p><strong>关闭连接和资源</strong>：使用完数据库连接和其他资源后，记得关闭它们，以释放资源并确保安全关闭。通常，你需要在<code>finally</code>块中关闭连接、语句和结果集。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (resultSet != <span class="literal">null</span>) {</span><br><span class="line">    resultSet.close();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (statement != <span class="literal">null</span>) {</span><br><span class="line">    statement.close();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="literal">null</span>) {</span><br><span class="line">    connection.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>异常处理</strong>：务必处理可能抛出的异常，以确保程序的健壮性。你可以使用<code>try-catch</code>块来捕获异常。</p></li></ol><h2 id="11-3-Statement"><a href="#11-3-Statement" class="headerlink" title="11.3 Statement"></a>11.3 Statement</h2><ol><li><p><strong>execute(String sql)</strong> 示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isResultSet</span> <span class="operator">=</span> statement.execute(<span class="string">"SELECT * FROM your_table"</span>);</span><br><span class="line"><span class="keyword">if</span> (isResultSet) {</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.getResultSet();</span><br><span class="line">    <span class="comment">// 处理查询结果...</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">rowsAffected</span> <span class="operator">=</span> statement.getUpdateCount();</span><br><span class="line">    System.out.println(rowsAffected + <span class="string">" rows updated."</span>);</span><br><span class="line">}</span><br><span class="line">statement.close();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>executeQuery(String sql)</strong> 示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(<span class="string">"SELECT * FROM your_table"</span>);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) {</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"id"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">"name"</span>);</span><br><span class="line">    <span class="comment">// 处理查询结果...</span></span><br><span class="line">}</span><br><span class="line">statement.close();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>executeUpdate(String sql)</strong> 示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">int</span> <span class="variable">rowsAffected</span> <span class="operator">=</span> statement.executeUpdate(<span class="string">"UPDATE your_table SET column1 = 'value' WHERE column2 = 'criteria'"</span>);</span><br><span class="line">System.out.println(rowsAffected + <span class="string">" rows updated."</span>);</span><br><span class="line">statement.close();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>addBatch(String sql) 和 executeBatch() 示例</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">statement.addBatch(<span class="string">"INSERT INTO your_table (column1, column2) VALUES ('value1', 'value2')"</span>);</span><br><span class="line">statement.addBatch(<span class="string">"UPDATE your_table SET column1 = 'new_value' WHERE column2 = 'criteria'"</span>);</span><br><span class="line"><span class="type">int</span>[] batchResults = statement.executeBatch();</span><br><span class="line"><span class="comment">// 处理批处理结果...</span></span><br><span class="line">statement.close();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>setMaxRows(int max)</strong> 示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">statement.setMaxRows(<span class="number">10</span>); <span class="comment">// 限制结果集最多返回 10 行</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(<span class="string">"SELECT * FROM your_table"</span>);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) {</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"id"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">"name"</span>);</span><br><span class="line">    <span class="comment">// 处理查询结果...</span></span><br><span class="line">}</span><br><span class="line">statement.close();</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="11-4-PreparedStatement"><a href="#11-4-PreparedStatement" class="headerlink" title="11.4 PreparedStatement"></a>11.4 PreparedStatement</h2><blockquote><ol><li><strong>预编译性</strong>：<ul><li><code>Statement</code> 是动态 SQL 语句，每次执行 SQL 查询时，都需要将 SQL 字符串发送到数据库进行解析和编译。这可能会导致性能下降，特别是在频繁执行相同查询时。</li><li><code>PreparedStatement</code> 是预编译的 SQL 语句，它在数据库中已经编译好了。你可以在 SQL 语句中使用占位符（如 <code>?</code>），然后在执行时提供具体的值，而不需要重新编译 SQL 语句。这提高了性能并减少了潜在的 SQL 注入风险。</li></ul></li><li><strong>SQL 注入</strong>：<ul><li><code>Statement</code> 在构造 SQL 查询时直接将变量值插入到查询字符串中，如果不谨慎处理输入数据，可能会导致 SQL 注入攻击。</li><li><code>PreparedStatement</code> 使用占位符来分离 SQL 查询和数据值，从而减少了 SQL 注入风险。数据库会安全处理占位符中的数据值。</li></ul></li><li><strong>可读性和维护性</strong>：<ul><li><code>Statement</code> 可能会导致更复杂的 SQL 查询字符串，因为你需要手动将值嵌入到查询中。</li><li><code>PreparedStatement</code> 更容易维护，因为 SQL 查询和数据值是分开的。</li></ul></li><li><strong>性能</strong>：<ul><li><code>PreparedStatement</code> 通常比 <code>Statement</code> 更快，特别是在重复执行相同的查询时，因为它允许数据库进行查询缓存和优化。</li></ul></li></ol></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatementExample</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">"jdbc:mysql://localhost:3306/your_database"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">"your_username"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">"your_password"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 1. 创建数据库连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 插入数据</span></span><br><span class="line">            insertData(connection, <span class="string">"john_doe"</span>, <span class="string">"john@example.com"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 查询数据</span></span><br><span class="line">            retrieveData(connection, <span class="string">"john_doe"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 更新数据</span></span><br><span class="line">            updateData(connection, <span class="string">"john_doe"</span>, <span class="string">"new_email@example.com"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 删除数据</span></span><br><span class="line">            deleteData(connection, <span class="string">"john_doe"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6. 关闭连接</span></span><br><span class="line">            connection.close();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertData</span><span class="params">(Connection connection, String username, String email)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">        <span class="type">String</span> <span class="variable">insertSQL</span> <span class="operator">=</span> <span class="string">"INSERT INTO users (username, email) VALUES (?, ?)"</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(insertSQL);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, username);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, email);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowsInserted</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(rowsInserted + <span class="string">" row(s) inserted."</span>);</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">retrieveData</span><span class="params">(Connection connection, String username)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">        <span class="type">String</span> <span class="variable">selectSQL</span> <span class="operator">=</span> <span class="string">"SELECT * FROM users WHERE username = ?"</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(selectSQL);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, username);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) {</span><br><span class="line">            System.out.println(<span class="string">"User ID: "</span> + resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"Username: "</span> + resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">            System.out.println(<span class="string">"Email: "</span> + resultSet.getString(<span class="string">"email"</span>));</span><br><span class="line">        }</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateData</span><span class="params">(Connection connection, String username, String newEmail)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">        <span class="type">String</span> <span class="variable">updateSQL</span> <span class="operator">=</span> <span class="string">"UPDATE users SET email = ? WHERE username = ?"</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(updateSQL);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, newEmail);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, username);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowsUpdated</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(rowsUpdated + <span class="string">" row(s) updated."</span>);</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteData</span><span class="params">(Connection connection, String username)</span> <span class="keyword">throws</span> SQLException {</span><br><span class="line">        <span class="type">String</span> <span class="variable">deleteSQL</span> <span class="operator">=</span> <span class="string">"DELETE FROM users WHERE username = ?"</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(deleteSQL);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, username);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowsDeleted</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(rowsDeleted + <span class="string">" row(s) deleted."</span>);</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="11-5-ResultSet"><a href="#11-5-ResultSet" class="headerlink" title="11.5 ResultSet"></a>11.5 ResultSet</h2><p>在 Java 中，你可以使用 <code>ResultSet</code> 对象来处理从数据库查询中获取的结果集。以下是一些常见的 <code>ResultSet</code> 操作：</p><ol><li><p><strong>遍历结果集</strong>：你可以使用 <code>while</code> 循环和 <code>resultSet.next()</code> 方法遍历结果集的每一行。在循环内部，你可以使用不同的 <code>getXXX</code> 方法来获取不同列的数据，例如 <code>getInt()</code>, <code>getString()</code>, <code>getDouble()</code> 等。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(<span class="string">"SELECT * FROM my_table"</span>);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) {</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"id"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">"name"</span>);</span><br><span class="line">    <span class="comment">// 处理每一行数据</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>获取单个列的数据</strong>：你可以使用 <code>getXXX</code> 方法来获取单个列的数据，例如 <code>getInt()</code>, <code>getString()</code>, <code>getDouble()</code> 等。方法的参数是列名或列索引。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">"id"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">"name"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>检查列是否存在</strong>：你可以使用 <code>ResultSet</code> 的 <code>findColumn()</code> 方法来检查某列是否存在。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">columnIndex</span> <span class="operator">=</span> resultSet.findColumn(<span class="string">"columnName"</span>);</span><br><span class="line"><span class="keyword">if</span> (columnIndex &gt; <span class="number">0</span>) {</span><br><span class="line">    <span class="comment">// 列存在</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 列不存在</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>获取结果集的元数据</strong>：你可以使用 <code>ResultSet</code> 的 <code>getMetaData()</code> 方法来获取结果集的元数据，包括列数、列名等。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> resultSet.getMetaData();</span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> metaData.getColumnCount();</span><br><span class="line"><span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> metaData.getColumnName(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>定位到特定行</strong>：你可以使用 <code>ResultSet</code> 的 <code>absolute()</code> 方法将游标移动到结果集中的指定行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resultSet.absolute(<span class="number">3</span>); <span class="comment">// 将游标移动到第 3 行</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>**关闭 <code>ResultSet</code>**：在使用完 <code>ResultSet</code> 后，务必调用 <code>close()</code> 方法来释放资源。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resultSet.close();</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="11-6-查询案例"><a href="#11-6-查询案例" class="headerlink" title="11.6 查询案例"></a>11.6 查询案例</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create database test;</span><br><span class="line">use test;</span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">    id int PRIMARY KEY,</span><br><span class="line">    name varchar(50),</span><br><span class="line">    age int,</span><br><span class="line">    sex varchar(50)</span><br><span class="line">);</span><br><span class="line">alter table user change sex sex varchar(50) character set utf8;</span><br><span class="line">INSERT INTO `user`(`id`, `name`, `age`, `sex`) VALUES (1, 'shi', 20, '男');</span><br><span class="line">INSERT INTO `user`(`id`, `name`, `age`, `sex`) VALUES (2, 'yan', 13, '女');</span><br><span class="line">INSERT INTO `user`(`id`, `name`, `age`, `sex`) VALUES (3, 'lou', 22, '女');</span><br><span class="line">INSERT INTO `user`(`id`, `name`, `age`, `sex`) VALUES (4, 'admin', 50, '男');</span><br></pre></td></tr></tbody></table></figure><ul><li>查询 Id 为 1 的用户。</li><li>查询年龄为 13 岁，名字为 yan 的用户。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTest</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">"jdbc:mysql://localhost/test"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASS</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 1. 创建数据库连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 执行第一个查询</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">"SELECT name FROM user WHERE id &gt;= 1"</span>;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement1</span> <span class="operator">=</span> connection.prepareStatement(sql1);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet1</span> <span class="operator">=</span> preparedStatement1.executeQuery();</span><br><span class="line">            System.out.println(<span class="string">"id &gt;= 1"</span>);</span><br><span class="line">            <span class="keyword">while</span> (resultSet1.next()) {</span><br><span class="line">                System.out.println(resultSet1.getString(<span class="string">"name"</span>));</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 执行第二个查询</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">"SELECT * FROM user WHERE age = 13 and name = 'yan'"</span>;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement2</span> <span class="operator">=</span> connection.prepareStatement(sql2);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet2</span> <span class="operator">=</span> preparedStatement2.executeQuery();</span><br><span class="line">            System.out.println(<span class="string">"find"</span>);</span><br><span class="line">            <span class="keyword">while</span> (resultSet2.next()) {</span><br><span class="line">                System.out.println(<span class="string">"name = "</span> + resultSet2.getString(<span class="string">"name"</span>));</span><br><span class="line">                System.out.println(<span class="string">"sex = "</span> + resultSet2.getString(<span class="string">"sex"</span>));</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 关闭资源</span></span><br><span class="line">            resultSet1.close();</span><br><span class="line">            preparedStatement1.close();</span><br><span class="line">            resultSet2.close();</span><br><span class="line">            preparedStatement2.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11-7-事务管理"><a href="#11-7-事务管理" class="headerlink" title="11.7 事务管理"></a>11.7 事务管理</h2><p>在 JDBC 中，你可以使用事务来管理数据库操作，以确保一组相关操作要么都成功提交，要么都回滚（撤销）。这是保证数据库操作的一致性和完整性的重要方式。</p><p>以下是在 JDBC 中进行事务管理的一般步骤：</p><ol><li><p><strong>开启事务</strong>：在执行 SQL 操作之前，你可以通过将自动提交（Auto-Commit）设置为 <code>false</code> 来开启事务。默认情况下，JDBC 是自动提交的，每个 SQL 语句都会立即生效。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.setAutoCommit(<span class="literal">false</span>); <span class="comment">// 关闭自动提交</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>执行数据库操作</strong>：在事务中执行你的数据库操作，包括插入、更新、删除等。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行数据库操作，例如 INSERT、UPDATE、DELETE</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>提交事务</strong>：如果所有的数据库操作都成功，你可以使用 <code>commit</code> 方法提交事务，使更改永久生效。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.commit(); <span class="comment">// 提交事务</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>回滚事务</strong>：如果发生错误或某些操作失败，你可以使用 <code>rollback</code> 方法来回滚事务，使之前的更改不会生效。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.rollback(); <span class="comment">// 回滚事务</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>关闭连接</strong>：最后，记得在完成事务后关闭数据库连接。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.close(); <span class="comment">// 关闭数据库连接</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>下面是一个示例代码，演示了如何在 JDBC 中管理事务：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTransactionExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">jdbcUrl</span> <span class="operator">=</span> <span class="string">"jdbc:mysql://localhost:3306/your_database"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"your_username"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">"your_password"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(jdbcUrl, username, password)) {</span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>); <span class="comment">// 开启事务</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 执行一些数据库操作</span></span><br><span class="line">                <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">                statement.execute(<span class="string">"INSERT INTO users (name, age) VALUES ('John', 30)"</span>);</span><br><span class="line">                statement.execute(<span class="string">"UPDATE users SET age = 31 WHERE name = 'John'"</span>);</span><br><span class="line">                statement.execute(<span class="string">"DELETE FROM users WHERE name = 'John'"</span>);</span><br><span class="line"></span><br><span class="line">                connection.commit(); <span class="comment">// 提交事务</span></span><br><span class="line">                System.out.println(<span class="string">"Transaction committed successfully."</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">                connection.rollback(); <span class="comment">// 回滚事务</span></span><br><span class="line">                System.err.println(<span class="string">"Transaction rolled back due to an error: "</span> + e.getMessage());</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们首先将自动提交关闭，然后执行一系列数据库操作。如果操作都成功，我们提交事务。如果任何操作失败，我们回滚事务，以确保之前的更改不会生效。这样，你可以确保一组相关的操作要么全部成功，要么全部失败。</p><h1 id="12-反射"><a href="#12-反射" class="headerlink" title="12 反射"></a>12 反射</h1><p>在Java中，反射（Reflection）是一种强大的机制，允许程序在运行时检查、获取和操作类、对象、方法、字段等程序元素的信息，而不需要在编译时确定这些元素的类型。反射提供了一种途径，使你能够在运行时动态地获取和操作类的成员，而不必事先知道这些成员的名称或类型。这对于编写通用工具、框架和调试器非常有用。</p><p>在Java的反射机制中，有一些常用的类和接口，以下是其中一些主要的类和它们的用途：</p><ol><li>**<code>java.lang.Class</code>**：<code>Class</code>类代表一个类的运行时类型信息。你可以使用它来获取类的各种信息，如类名、字段、方法、构造方法、父类、接口等。</li><li>**<code>java.lang.reflect.Field</code>**：<code>Field</code>类用于表示类中的字段（成员变量）。你可以使用它来获取和设置字段的值，包括私有字段。</li><li>**<code>java.lang.reflect.Method</code>**：<code>Method</code>类用于表示类中的方法。你可以使用它来调用类的方法，包括私有方法。</li><li>**<code>java.lang.reflect.Constructor</code>**：<code>Constructor</code>类用于表示类的构造方法。你可以使用它来实例化类的对象。</li><li>**<code>java.lang.reflect.Modifier</code>**：<code>Modifier</code>类包含了一组用于解析修饰符的静态方法，如<code>isPublic()</code>、<code>isStatic()</code>等。</li><li>**<code>java.lang.reflect.Array</code>**：<code>Array</code>类提供了创建和操作数组的静态方法，如<code>newInstance()</code>和<code>getLength()</code>。</li></ol><p>使用这些类，你可以实现反射的各种功能。以下是使用反射的一般步骤：</p><ol><li>获取类的<code>Class</code>对象，通常使用<code>.class</code>关键字或<code>getClass()</code>方法。</li><li>使用<code>Class</code>对象获取类的信息，如字段、方法或构造方法，通过<code>getFields()</code>, <code>getDeclaredFields()</code>, <code>getMethods()</code>, <code>getDeclaredMethods()</code>, <code>getConstructors()</code>, <code>getDeclaredConstructors()</code>等方法。</li><li>创建类的对象，可以使用<code>Constructor</code>对象的<code>newInstance()</code>方法。</li><li>操作字段和调用方法，使用<code>Field</code>对象的<code>get()</code>和<code>set()</code>方法，以及<code>Method</code>对象的<code>invoke()</code>方法。</li><li>处理异常，因为反射可能引发<code>NoSuchMethodException</code>、<code>IllegalAccessException</code>等异常，需要适当捕获和处理。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Hello, my name is "</span> + name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="comment">// 1. 获取类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; personClass = Class.forName(<span class="string">"Person"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = personClass.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">person</span> <span class="operator">=</span> constructor.newInstance(<span class="string">"Alice"</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 访问字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) nameField.get(person);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">ageField</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">        ageField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> (<span class="type">int</span>) ageField.get(person);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Name: "</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"Age: "</span> + age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 调用方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">sayHelloMethod</span> <span class="operator">=</span> personClass.getDeclaredMethod(<span class="string">"sayHello"</span>);</span><br><span class="line">        sayHelloMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        sayHelloMethod.invoke(person);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="13-正则表达式"><a href="#13-正则表达式" class="headerlink" title="13 正则表达式"></a>13 正则表达式</h2><h2 id="13-1-用法"><a href="#13-1-用法" class="headerlink" title="13.1 用法"></a>13.1 用法</h2><ol><li>导入正则表达式的库：</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br></pre></td></tr></tbody></table></figure><ol><li>创建正则表达式模式对象（Pattern对象）：</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">"正则表达式"</span>);</span><br></pre></td></tr></tbody></table></figure><ol><li>创建匹配器对象（Matcher对象）并使用模式匹配字符串：</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">"要匹配的字符串"</span>);</span><br></pre></td></tr></tbody></table></figure><ol><li>使用匹配器对象进行匹配操作，并根据需要获取匹配结果：</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (matcher.find()) {</span><br><span class="line">    <span class="comment">// 找到匹配</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">matchedText</span> <span class="operator">=</span> matcher.group(); <span class="comment">// 获取匹配的文本</span></span><br><span class="line">    <span class="comment">// 进行其他操作</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 没有找到匹配</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以下是一些常见的正则表达式用法示例：</p><ul><li><strong>查找匹配</strong>：使用 <code>find()</code> 方法查找字符串中是否包含匹配正则表达式的部分。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">"\\d+"</span>); <span class="comment">// 匹配一个或多个数字</span></span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">"12345 Hello 6789"</span>);</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) {</span><br><span class="line">    <span class="type">String</span> <span class="variable">matchedText</span> <span class="operator">=</span> matcher.group();</span><br><span class="line">    System.out.println(<span class="string">"匹配到: "</span> + matchedText);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>替换</strong>：使用 <code>replaceAll()</code> 方法将匹配的部分替换为指定的文本。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> input.replaceAll(<span class="string">"World"</span>, <span class="string">"Java"</span>);</span><br><span class="line">System.out.println(result); <span class="comment">// 输出: "Hello, Java!"</span></span><br></pre></td></tr></tbody></table></figure><ul><li><strong>分割</strong>：使用 <code>split()</code> 方法根据正则表达式分割字符串。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">"apple,banana,grape"</span>;</span><br><span class="line">String[] fruits = input.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">for</span> (String fruit : fruits) {</span><br><span class="line">    System.out.println(fruit);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/09/18/guai/"/>
      <url>/2023/09/18/guai/</url>
      
        <content type="html"><![CDATA[<h1 id="发现了一只乖乖猪"><a href="#发现了一只乖乖猪" class="headerlink" title="发现了一只乖乖猪~"></a>发现了一只乖乖猪~</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/09/18/text/"/>
      <url>/2023/09/18/text/</url>
      
        <content type="html"><![CDATA[<h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><h2 id="小标题"><a href="#小标题" class="headerlink" title="小标题"></a>小标题</h2><p>正文</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;isotream&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/18/hello-world/"/>
      <url>/2023/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
