<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/09/22/java/"/>
      <url>/2023/09/22/java/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1 基本语法"></a>1 基本语法</h1><h2 id="1-1-String"><a href="#1-1-String" class="headerlink" title="1.1 String"></a>1.1 String</h2><p>在Java中，<code>String</code> 类是用于表示字符串的类，它提供了丰富的方法和功能来操作字符串。字符串是一组字符的序列，而在Java中，字符串是不可变的，这意味着一旦创建了字符串，就不能更改其内容。</p><p>以下是一些常用的 <code>String</code> 类的用法和示例：</p><h3 id="1-创建字符串"><a href="#1-创建字符串" class="headerlink" title="1. 创建字符串"></a>1. 创建字符串</h3><p>可以通过直接赋值或使用构造函数创建字符串对象：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">"Hello, World!"</span>;  <span class="comment">// 使用直接赋值创建字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"Hello, World!"</span>);  <span class="comment">// 使用构造函数创建字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-获取字符串长度"><a href="#2-获取字符串长度" class="headerlink" title="2. 获取字符串长度"></a>2. 获取字符串长度</h3><p>可以使用 <code>length()</code> 方法获取字符串的长度：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length();  <span class="comment">// 获取字符串长度</span></span><br><span class="line">System.out.println(<span class="string">"Length of the string: "</span> + length);</span><br></pre></td></tr></tbody></table></figure><h3 id="3-拼接字符串"><a href="#3-拼接字符串" class="headerlink" title="3. 拼接字符串"></a>3. 拼接字符串</h3><p>可以使用 <code>+</code> 运算符或 <code>concat()</code> 方法将多个字符串拼接在一起：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">"Hello, "</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">"World!"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str1 + str2;  <span class="comment">// 使用 + 运算符拼接字符串</span></span><br><span class="line"><span class="comment">// 或者使用 concat() 方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str1.concat(str2);</span><br><span class="line">System.out.println(<span class="string">"Concatenated string: "</span> + result);</span><br></pre></td></tr></tbody></table></figure><h3 id="4-字符串比较"><a href="#4-字符串比较" class="headerlink" title="4. 字符串比较"></a>4. 字符串比较</h3><p>可以使用 <code>equals()</code> 方法或 <code>compareTo()</code> 方法比较字符串：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">"hello"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">"Hello"</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> str1.equals(str2);  <span class="comment">// 使用 equals() 比较字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">comparison</span> <span class="operator">=</span> str1.compareTo(str2);  <span class="comment">// 使用 compareTo() 比较字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-提取子字符串"><a href="#5-提取子字符串" class="headerlink" title="5. 提取子字符串"></a>5. 提取子字符串</h3><p>可以使用 <code>substring()</code> 方法从字符串中提取子串：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">subStr</span> <span class="operator">=</span> str.substring(<span class="number">7</span>);  <span class="comment">// 提取从位置7开始的子串</span></span><br><span class="line">System.out.println(<span class="string">"Substring: "</span> + subStr);</span><br></pre></td></tr></tbody></table></figure><h3 id="6-查找子字符串"><a href="#6-查找子字符串" class="headerlink" title="6. 查找子字符串"></a>6. 查找子字符串</h3><p>可以使用 <code>indexOf()</code> 方法或 <code>contains()</code> 方法查找子字符串是否存在：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"Hello, World!"</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">"World"</span>);  <span class="comment">// 查找子串的位置</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> str.contains(<span class="string">"Hello"</span>);  <span class="comment">// 检查是否包含子串</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-StringBuilder"><a href="#1-2-StringBuilder" class="headerlink" title="1.2 StringBuilder"></a>1.2 StringBuilder</h2><p>在Java中，<code>StringBuilder</code> 是一个用于处理可变字符串的类。与 <code>String</code> 不同，<code>StringBuilder</code> 允许你在不创建新对象的情况下修改字符串的内容，这对于频繁的字符串拼接操作非常高效。以下是一些使用 <code>StringBuilder</code> 的常见方法和示例：</p><h3 id="1-创建-StringBuilder-对象"><a href="#1-创建-StringBuilder-对象" class="headerlink" title="1. 创建 StringBuilder 对象"></a>1. 创建 <code>StringBuilder</code> 对象</h3><p>可以使用构造函数创建一个 <code>StringBuilder</code> 对象：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); <span class="comment">// 创建一个空的 StringBuilder 对象</span></span><br></pre></td></tr></tbody></table></figure><p>你也可以在构造函数中传入一个初始字符串：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello"</span>); <span class="comment">// 创建包含初始字符串 "Hello" 的 StringBuilder 对象</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-追加字符串"><a href="#2-追加字符串" class="headerlink" title="2. 追加字符串"></a>2. 追加字符串</h3><p>可以使用 <code>append()</code> 方法来追加字符串到 <code>StringBuilder</code> 对象：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello"</span>);</span><br><span class="line">sb.append(<span class="string">", World!"</span>); <span class="comment">// 追加字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-插入字符串"><a href="#3-插入字符串" class="headerlink" title="3. 插入字符串"></a>3. 插入字符串</h3><p>使用 <code>insert()</code> 方法可以在指定位置插入字符串：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello"</span>);</span><br><span class="line">sb.insert(<span class="number">5</span>, <span class="string">" Java"</span>); <span class="comment">// 在位置5插入字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-删除字符"><a href="#4-删除字符" class="headerlink" title="4. 删除字符"></a>4. 删除字符</h3><p>使用 <code>delete()</code> 方法可以删除指定范围内的字符：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">sb.delete(<span class="number">7</span>, <span class="number">13</span>); <span class="comment">// 删除位置7到13之间的字符</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-替换字符"><a href="#5-替换字符" class="headerlink" title="5. 替换字符"></a>5. 替换字符</h3><p>使用 <code>replace()</code> 方法可以替换指定范围内的字符：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line">sb.replace(<span class="number">7</span>, <span class="number">13</span>, <span class="string">"Java"</span>); <span class="comment">// 将位置7到13之间的字符替换为 "Java"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-获取字符串"><a href="#6-获取字符串" class="headerlink" title="6. 获取字符串"></a>6. 获取字符串</h3><p>使用 <code>toString()</code> 方法可以将 <code>StringBuilder</code> 对象转换为 <code>String</code>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sb.toString(); <span class="comment">// 转换为 String</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-获取长度"><a href="#7-获取长度" class="headerlink" title="7. 获取长度"></a>7. 获取长度</h3><p>可以使用 <code>length()</code> 方法获取 <code>StringBuilder</code> 中字符的数量：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"Hello, World!"</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> sb.length(); <span class="comment">// 获取长度</span></span><br></pre></td></tr></tbody></table></figure><p><code>StringBuilder</code> 的方法允许你执行许多字符串操作，而不需要创建多个不必要的字符串对象，这在性能上通常更高效。因此，当需要频繁修改字符串时，建议使用 <code>StringBuilder</code>。</p><h2 id="1-3-final关键字"><a href="#1-3-final关键字" class="headerlink" title="1.3 final关键字"></a>1.3 final关键字</h2><p><code>final</code> 是 Java 编程语言中的一个关键字，用于表示不可变性和不可继承性，它可以用于不同的上下文中，具体作用如下：</p><ol><li><p><strong>不可变变量</strong>：当你将 <code>final</code> 关键字应用于一个变量时，它表示该变量的值不能被修改，即它是一个不可变变量（immutable）。通常用于声明常量，这意味着一旦分配了值，就不能再更改。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">// x = 20;  // 这将导致编译错误，因为 x 是不可变的</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>不可变类</strong>：当你将 <code>final</code> 关键字应用于一个类时，它表示该类不能被继承，即它是一个不可继承的类。这通常用于防止其他类继承或修改基类的行为，以确保类的稳定性和安全性。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MyFinalClass</span> {</span><br><span class="line">    <span class="comment">// 类的成员和方法</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 下面的代码将导致编译错误，因为无法继承 MyFinalClass</span></span><br><span class="line"><span class="comment">// class AnotherClass extends MyFinalClass { ... }</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>不可变方法</strong>：当你将 <code>final</code> 关键字应用于一个方法时，它表示该方法不能被子类重写或覆盖。这通常用于确保某个方法的行为不会被修改。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyBaseClass</span> {</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">myFinalMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 这个方法不能被子类重写</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>不可变参数</strong>：当你将 <code>final</code> 关键字应用于方法的参数时，它表示该参数的值在方法内部不能被修改。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> param)</span> {</span><br><span class="line">    <span class="comment">// param 的值不能在方法内部被修改</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="1-4-super关键字"><a href="#1-4-super关键字" class="headerlink" title="1.4 super关键字"></a>1.4 super关键字</h2><p><code>super</code> 是 Java 中的一个关键字，用于引用父类（或超类）的成员变量、方法和构造函数。它可以在子类中使用，用于访问或调用父类的成员或构造函数。以下是关于 <code>super</code> 关键字的使用方法：</p><ol><li><p><strong>访问父类的成员变量</strong>：你可以使用 <code>super</code> 关键字来访问父类中的成员变量，特别是在子类中存在与父类同名的成员变量时。这样可以避免混淆。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"子类 x："</span> + x); <span class="comment">// 访问子类的 x</span></span><br><span class="line">        System.out.println(<span class="string">"父类 x："</span> + <span class="built_in">super</span>.x); <span class="comment">// 访问父类的 x</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>调用父类的方法</strong>：你可以使用 <code>super</code> 关键字来调用父类中的方法，特别是在子类中存在与父类同名的方法时。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"这是父类的消息"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"这是子类的消息"</span>);</span><br><span class="line">        <span class="built_in">super</span>.showMessage(); <span class="comment">// 调用父类的 showMessage() 方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>调用父类的构造函数</strong>：你可以使用 <code>super</code> 关键字来调用父类的构造函数。这通常用于子类的构造函数中，以确保父类的初始化工作得以执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> {</span><br><span class="line">    Parent() {</span><br><span class="line">        System.out.println(<span class="string">"父类的构造函数"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> {</span><br><span class="line">    Child() {</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">        System.out.println(<span class="string">"子类的构造函数"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>注意事项：</p><ul><li>在子类构造函数中，如果没有显式调用 <code>super()</code> 来调用父类的构造函数，Java 将自动调用父类的默认构造函数。</li><li><code>super()</code> 必须作为子类构造函数的第一行语句出现，因此它通常是构造函数的第一句。</li></ul><h2 id="1-5-abstract-关键字"><a href="#1-5-abstract-关键字" class="headerlink" title="1.5 abstract 关键字"></a>1.5 abstract 关键字</h2><p><code>abstract</code> 是 Java 中的一个关键字，用于声明抽象类和抽象方法。抽象类和抽象方法的目的是为了提供一种结构，以便其他类可以继承或实现它们，并根据需要进行定制化实现。以下是 <code>abstract</code> 关键字的主要作用：</p><ol><li><p><strong>抽象类</strong>：</p><ul><li>抽象类用 <code>abstract</code> 关键字声明，它不能被实例化（不能创建对象）。</li><li>抽象类可以包含抽象方法和非抽象方法。</li><li>抽象类的存在是为了被继承和拓展，提供通用的结构和行为。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> {</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">nonAbstractMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"非抽象方法的实现"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>抽象方法</strong>：</p><ul><li>抽象方法用 <code>abstract</code> 关键字声明，但没有方法体。</li><li>抽象方法必须在抽象类中声明，不允许在普通类中声明。</li><li>抽象方法的具体实现由继承抽象类的子类完成。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> {</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> {</span><br><span class="line">    <span class="comment">// 必须实现抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"抽象方法的实现"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>抽象类和抽象方法的作用是为了促使子类实现特定的行为，同时确保了基类中的通用结构。这有助于提高代码的可维护性和扩展性，同时强调了面向对象设计的抽象思想。</p><h1 id="2-类"><a href="#2-类" class="headerlink" title="2 类"></a>2 类</h1><h2 id="2-1-接口"><a href="#2-1-接口" class="headerlink" title="2.1 接口"></a>2.1 接口</h2><p>在 Java 中，接口（Interface）是一种抽象类型，它定义了一组抽象方法，但没有具体的实现。接口通常用于描述对象应该具有的行为。以下是关于 Java 接口的主要特点：</p><ol><li><p><strong>接口定义</strong>：接口使用 <code>interface</code> 关键字定义。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="comment">// 抽象方法的声明</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>抽象方法</strong>：接口中的方法都是抽象的，它们只有方法签名，没有方法体。</p></li><li><p><strong>接口实现</strong>：一个类可以实现一个或多个接口。使用关键字 <code>implements</code> 来表示类实现了一个接口。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="comment">// 必须实现接口中的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 实现具体逻辑</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>多继承</strong>：Java 中不支持多继承，但一个类可以实现多个接口，这使得 Java 中的多继承概念得以体现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface1</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface2</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>, Interface2 {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 实现 method1</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 实现 method2</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>接口默认方法</strong>：从 Java 8 开始，接口可以包含具有默认实现的方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"默认方法的实现"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>接口静态方法</strong>：从 Java 8 开始，接口可以包含静态方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"静态方法的实现"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>接口在 Java 中扮演着重要的角色，它提供了一种将抽象概念定义为一组行为的方式，从而实现了多态性和代码复用。接口也是 Java 中实现多继承的一种方式，使得类可以实现多个行为规范。</p><h2 id="2-2-Override"><a href="#2-2-Override" class="headerlink" title="2.2 @Override"></a>2.2 @Override</h2><p><code>@Override</code> 注解用于告诉编译器，被标注的方法是要重写（覆盖）父类或接口中的方法。通常情况下，你应该在以下情况下使用 <code>@Override</code> 注解：</p><ol><li><p><strong>重写父类方法</strong>：当你在子类中编写一个方法，其名称、参数列表和返回类型与父类中的方法完全一致时，应该使用 <code>@Override</code> 注解来明确指示你意图重写父类方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 父类方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 子类重写的方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>实现接口方法</strong>：当你在一个类中实现了一个接口中的方法时，也应该使用 <code>@Override</code> 注解。这有助于提醒你，你是在实现一个接口方法，而不是创建一个新的方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 实现接口方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>编码规范</strong>：在许多编码规范中，推荐使用 <code>@Override</code> 注解，以提高代码的可读性和可维护性。这有助于其他开发人员理解你的代码意图，并防止意外的方法签名变更。</p></li></ol><p>虽然在上述情况下使用 <code>@Override</code> 注解是很好的实践，但并非所有情况下都需要使用它。在以下情况下，你通常不需要使用 <code>@Override</code> 注解：</p><ul><li>当你编写的方法不是为了重写父类或实现接口中的方法时。</li><li>当你在 Java 版本低于 5 的环境中编写代码，因为 <code>@Override</code> 注解是在 Java 5 中引入的。</li></ul><h1 id="3-常用类"><a href="#3-常用类" class="headerlink" title="3 常用类"></a>3 常用类</h1><h2 id="3-1-Arrays"><a href="#3-1-Arrays" class="headerlink" title="3.1 Arrays"></a>3.1 Arrays</h2><p>当使用 <code>Arrays</code> 类的方法时，通常需要导入 <code>java.util.Arrays</code> 包。以下是一些使用 <code>Arrays</code> 类方法的示例：</p><p><strong>1. 使用 <code>sort</code> 方法对数组进行排序：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraySortingExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = {<span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>};</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(numbers);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Sorted Array: "</span> + Arrays.toString(numbers));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>2. 使用 <code>binarySearch</code> 方法查找元素：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>};</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) {</span><br><span class="line">            System.out.println(<span class="string">"Element "</span> + key + <span class="string">" found at index "</span> + index);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"Element "</span> + key + <span class="string">" not found in the array"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>3. 使用 <code>equals</code> 方法比较数组：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayComparisonExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] array1 = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line">        <span class="type">int</span>[] array2 = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> Arrays.equals(array1, array2);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (isEqual) {</span><br><span class="line">            System.out.println(<span class="string">"Arrays are equal."</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"Arrays are not equal."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>4. 使用 <code>fill</code> 方法填充数组：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayFillExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        </span><br><span class="line">        Arrays.fill(numbers, <span class="number">42</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Filled Array: "</span> + Arrays.toString(numbers));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-time"><a href="#3-2-time" class="headerlink" title="3.2 time"></a>3.2 time</h2><p><code>java.time</code> 包是Java 8引入的现代日期和时间处理API，提供了一系列类来处理日期、时间和时区。以下是一些<code>java.time</code>包的主要类和用法示例：</p><ol><li><p><strong>LocalDate</strong>：用于表示日期，不包含时间和时区信息。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">customDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> today.getYear();</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> today.getMonthValue();</span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> today.getDayOfMonth();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>LocalTime</strong>：用于表示时间，不包含日期和时区信息。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">customTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> currentTime.getHour();</span><br><span class="line"><span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> currentTime.getMinute();</span><br><span class="line"><span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> currentTime.getSecond();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>LocalDateTime</strong>：用于表示日期和时间的组合，不包含时区信息。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">currentDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">customDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> currentDateTime.getYear();</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> currentDateTime.getMonthValue();</span><br><span class="line"><span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> currentDateTime.getHour();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>ZonedDateTime</strong>：用于表示带时区的日期和时间。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ZoneId</span> <span class="variable">newYorkZone</span> <span class="operator">=</span> ZoneId.of(<span class="string">"America/New_York"</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">newYorkTime</span> <span class="operator">=</span> ZonedDateTime.now(newYorkZone);</span><br><span class="line"></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">londonZone</span> <span class="operator">=</span> ZoneId.of(<span class="string">"Europe/London"</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">londonTime</span> <span class="operator">=</span> newYorkTime.withZoneSameInstant(londonZone);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>Duration</strong>：用于表示时间段，可以用于计算时间间隔。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">start</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">end</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(start, end);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">hours</span> <span class="operator">=</span> duration.toHours();</span><br><span class="line"><span class="type">long</span> <span class="variable">minutes</span> <span class="operator">=</span> duration.toMinutes();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>Period</strong>：用于表示日期段，可以用于计算日期间隔。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">startDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">endDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">5</span>);</span><br><span class="line"><span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(startDate, endDate);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> period.getDays();</span><br><span class="line"><span class="type">int</span> <span class="variable">months</span> <span class="operator">=</span> period.getMonths();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>DateTimeFormatter</strong>：用于日期和时间的格式化和解析。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">formattedDateTime</span> <span class="operator">=</span> LocalDateTime.now().format(formatter);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">parsedDateTime</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">"2023-09-25 14:30:00"</span>, formatter);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>TemporalAdjusters</strong>：提供了一些有用的日期调整器，例如获取某月的第一个周一。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">firstMondayOfSeptember</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">1</span>).with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="3-3-Math"><a href="#3-3-Math" class="headerlink" title="3.3 Math"></a>3.3 Math</h2><p><code>java.lang.Math</code> 类包含了一些常用的数学方法，用于执行各种数学运算。以下是一些常用的 <code>Math</code> 类方法：</p><ol><li><strong>绝对值相关方法：</strong><ul><li><code>abs(x)</code>：返回给定数的绝对值。</li><li><code>max(x, y)</code>：返回两个数中较大的那个。</li><li><code>min(x, y)</code>：返回两个数中较小的那个。</li></ul></li><li><strong>舍入相关方法：</strong><ul><li><code>ceil(x)</code>：将参数向正无穷方向舍入为最接近的整数。</li><li><code>floor(x)</code>：将参数向负无穷方向舍入为最接近的整数。</li><li><code>round(x)</code>：将参数四舍五入为最接近的整数。</li><li><code>rint(x)</code>：将参数四舍五入为最接近的整数，如果两个整数同样接近，则选择偶数。</li></ul></li><li><strong>指数和对数相关方法：</strong><ul><li><code>exp(x)</code>：返回指数函数 e^x 的值。</li><li><code>log(x)</code>：返回自然对数（以 e 为底）的值。</li><li><code>pow(x, y)</code>：返回 x 的 y 次方。</li><li><code>sqrt(x)</code>：返回给定数的平方根。</li></ul></li><li><strong>三角函数相关方法：</strong><ul><li><code>sin(x)</code>：返回给定角度的正弦值。</li><li><code>cos(x)</code>：返回给定角度的余弦值。</li><li><code>tan(x)</code>：返回给定角度的正切值。</li><li><code>asin(x)</code>：返回给定值的反正弦值。</li><li><code>acos(x)</code>：返回给定值的反余弦值。</li><li><code>atan(x)</code>：返回给定值的反正切值。</li><li><code>toRadians(x)</code>：将角度从度数转换为弧度。</li><li><code>toDegrees(x)</code>：将角度从弧度转换为度数。</li></ul></li><li><strong>随机数生成方法：</strong><ul><li><code>random()</code>：返回一个伪随机 double 值，范围在 [0.0, 1.0) 之间。</li></ul></li></ol><h2 id="3-4-System"><a href="#3-4-System" class="headerlink" title="3.4 System"></a>3.4 System</h2><p><code>java.lang.System</code> 类是Java标准库中的一个类，它提供了一系列用于与系统交互的方法，包括访问系统属性、标准输入输出、以及进行垃圾回收等。以下是一些常见的 <code>System</code> 类方法和用法：</p><ol><li><p><strong>标准输入输出（I/O）：</strong></p><p>-<br>  System.out</p><p>  标准输出流，通常用于向控制台打印信息。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello, world!"</span>); <span class="comment">// 打印文本到控制台</span></span><br></pre></td></tr></tbody></table></figure><p>-<br>  System.err</p><p>  标准错误流，用于输出错误信息。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.err.println(<span class="string">"An error occurred!"</span>); <span class="comment">// 打印错误信息到控制台</span></span><br></pre></td></tr></tbody></table></figure><p>-<br>  System.in</p><p>  标准输入流，通常用于从控制台读取用户输入。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">"Enter your name: "</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>系统属性：</strong></p><p>-<br>  System.getProperty(String key)</p><p>  ：获取系统属性的值，可以用于获取系统信息，如操作系统类型、Java版本等。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">javaVersion</span> <span class="operator">=</span> System.getProperty(<span class="string">"java.version"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>垃圾回收：</strong></p><p>-<br>  System.gc()</p><p>  ：请求系统进行垃圾回收操作。注意，具体的垃圾回收时机和行为是由JVM决定的，所以不一定会立即执行垃圾回收。</p>  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.gc(); <span class="comment">// 请求进行垃圾回收</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>程序终止：</strong></p><ul><li><pre><code class="java">System.exit(int status)<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">终止当前Java虚拟机的运行，参数通常用于指示程序的退出状态。0 表示正常退出，非零值通常用于表示异常退出。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">System.exit(0); // 正常退出</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><p><strong>时间获取：</strong></p><ul><li><pre><code>System.currentTimeMillis()<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：返回当前时间的毫秒数，通常用于性能分析和计时。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">long startTime = System.currentTimeMillis();</span><br><span class="line">// 执行一些代码</span><br><span class="line">long endTime = System.currentTimeMillis();</span><br><span class="line">long elapsedTime = endTime - startTime;</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ul></li><li><p><strong>数组拷贝：</strong></p><ul><li><pre><code class="java">System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：用于将源数组的一部分复制到目标数组的指定位置。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">int[] sourceArray = {1, 2, 3, 4, 5};</span><br><span class="line">int[] destArray = new int[5];</span><br><span class="line">System.arraycopy(sourceArray, 0, destArray, 0, 5);</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ul></li></ol><p><code>System</code> 类提供了许多有用的方法，可以用于访问系统资源、执行一些底层操作，以及进行基本的输入输出。在实际编程中，它通常用于调试、性能分析、系统属性获取等操作。但要注意，在大多数情况下，直接与系统资源交互的需求不多，因为Java提供了更高级的库和API来完成常见的任务。</p><h2 id="3-5-Random"><a href="#3-5-Random" class="headerlink" title="3.5 Random"></a>3.5 Random</h2><p>在Java中，你可以使用 <code>java.util.Random</code> 类来生成随机数。以下是使用 <code>Random</code> 类的基本方法：</p><ol><li><p><strong>创建 Random 对象：</strong></p><p>首先，你需要创建一个 <code>Random</code> 对象，可以通过以下方式之一来实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用默认种子创建 Random 对象</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指定种子创建 Random 对象</span></span><br><span class="line"><span class="type">long</span> <span class="variable">seed</span> <span class="operator">=</span> <span class="number">123456789L</span>; <span class="comment">// 可以是任何长整数</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">seededRandom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(seed);</span><br></pre></td></tr></tbody></table></figure><p>通常情况下，如果你不需要指定特定的种子，可以使用无参数的构造函数创建 <code>Random</code> 对象，它会使用系统时间作为默认种子。</p></li><li><p><strong>生成随机整数：</strong></p><p>使用 <code>nextInt()</code> 方法可以生成一个随机整数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">randomNumber</span> <span class="operator">=</span> random.nextInt(); <span class="comment">// 生成任意范围的随机整数</span></span><br></pre></td></tr></tbody></table></figure><p>如果你希望生成在指定范围内的随机整数，可以使用 <code>nextInt(int bound)</code> 方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">randomInRange</span> <span class="operator">=</span> random.nextInt(max - min + <span class="number">1</span>) + min; <span class="comment">// 生成1到100之间的随机整数</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>生成随机浮点数：</strong></p><p>使用 <code>nextDouble()</code> 方法可以生成一个随机的 double 值，范围在 [0.0, 1.0) 之间：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">randomDouble</span> <span class="operator">=</span> random.nextDouble(); <span class="comment">// 生成0.0到1.0之间的随机浮点数</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>生成随机布尔值：</strong></p><p>使用 <code>nextBoolean()</code> 方法可以生成一个随机的布尔值（<code>true</code> 或 <code>false</code>）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">randomBoolean</span> <span class="operator">=</span> random.nextBoolean(); <span class="comment">// 随机生成true或false</span></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/09/18/guai/"/>
      <url>/2023/09/18/guai/</url>
      
        <content type="html"><![CDATA[<h1 id="发现了一只乖乖猪"><a href="#发现了一只乖乖猪" class="headerlink" title="发现了一只乖乖猪~"></a>发现了一只乖乖猪~</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/09/18/text/"/>
      <url>/2023/09/18/text/</url>
      
        <content type="html"><![CDATA[<h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><h2 id="小标题"><a href="#小标题" class="headerlink" title="小标题"></a>小标题</h2><p>正文</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;isotream&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/18/hello-world/"/>
      <url>/2023/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
